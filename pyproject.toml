[build-system]
requires = [
    "setuptools>=64",
    "setuptools_scm[toml]>=8",
    "scikit-build-core[pyproject]",
    "cython>=3.0",
    # Build Libraries
    "numpy>=1.24",
    "pyarrow>=19.0,<19.1",
    "mpi4py>=4.0,<4.1",
    "pip"
]
build-backend = "scikit_build_core.build"

[project]
name = "bodo"
dynamic = ["version"]
description = "High-Performance Python Compute Engine for Data and AI"
readme = "README.md"
requires-python = ">=3.9"
keywords = ["data", "analytics", "cluster"]
authors = [{ name = "Bodo.ai" }]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development :: Compilers",
    "Topic :: System :: Distributed Computing",
]

dependencies = [
    "numba>=0.60",
    "pyarrow>=19.0,<19.1",
    "pandas>=2.2",
    "numpy>=1.24",
    # fsspec >= 2021.09 because it includes Arrow filesystem wrappers (useful for fs.glob() for example)
    "fsspec>=2021.09",
    "requests",
    "cloudpickle>=3.0",
    "psutil",
    "impi-rt; sys_platform == 'win32'",
]

[project.urls]
Homepage = "https://bodo.ai"
Documentation = "https://docs.bodo.ai"
Repository = "https://github.com/bodo-ai/Bodo"

[project.optional-dependencies]
hdf5 = ["h5py"]
sklearn = ["scikit-learn"]
plot = ["matplotlib"]
s3fs = ["s3fs >=2022.1.0"]
adlfs = ["adlfs >=2022.1.0"]
snowflake = ["snowflake-connector-python"]
mysql = ["sqlalchemy", "PyMySQL"]
postgres = ["sqlalchemy", "psycopg2"]
oracle = ["sqlalchemy", "cx-Oracle", "libaio"]
iceberg = ["pyiceberg[glue]>=0.9"]
huggingface_hub = ["huggingface_hub"]
openai = ["openai"]


# -------------------------- CMake Config -------------------------- #
# Must Include to Enable
[tool.setuptools_scm]

[tool.scikit-build]
cmake.version = ">=3.23,<4.0"
strict-config = true
experimental = false
ninja.make-fallback = false
cmake.build-type = "Release"
build.verbose = true
logging.level = "INFO"

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
build-dir = "build/type_{build_type}"
wheel.exclude = [
    "bodo/**/*.h",
    "bodo/**/*.cpp",
    "bodo/**/*.c",
    "bodo/**/*.pxd",
    "bodo/**/*.pyx",
    "bodo/**/*.hpp",
    "bodo/bench",
    "bodo/transforms/**/*.pyc",
    "bodo/tests/*",
]

[tool.scikit-build.cmake.define]
MPICH_VERSION = "4.1.3"

# When building for Conda, set different
# arguments for CMake
[[tool.scikit-build.overrides]]
if.state = "editable"
cmake.build-type = "RelWithDebInfo"
build.verbose = false
wheel.exclude = [
    "bodo/**/*.h",
    "bodo/**/*.cpp",
    "bodo/**/*.c",
    "bodo/**/*.pxd",
    "bodo/**/*.pyx",
    "bodo/tests/data/**/*.crc",
    "bodo/bench",
]


# -------------------------------------- Dev Tools -------------------------------------- #
[tool.ruff]
unsafe-fixes = true
lint.extend-select = [
    "I",   # isort
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "TID", # flake8-tidy-imports
]
lint.ignore = [
    # Permanently Disabled Rules
    "E501", # Line too long. Black should manage this only
    "E741", # Ambiguous variable name: {name}
    # Use X | Y instead of (X, Y) in isinstance
    # Disabled because:
    # - X | Y is slower than (X, Y), could be problematic in hot code paths
    # - (X, Y) is more readable and formattable
    # - Numba doesn't support X | Y
    "UP038",

    # TODO: Gradually Enable in Next PR
    # Flake8 Rules
    "F405", # {name} may be undefined, or defined from star imports
    "F811", # Redefinition of unused {name} from line
    "E402", # Module level import not at top of file
    "E711", # Comparison to `None` should be `cond is not None`
    "E712", # Comparison to `...` should be `cond is False` or `if not cond:`
    "E731", # Do not assign a `lambda` expression, use a `def`
]
exclude = [
    ".git/",

    # TODO: Couple of ISort Problems with this folder
    "bodo-platform-image/",

    "demo/",
    "examples/",
    "BodoSQL/calcite_sql/bodosql-calcite-application/src/test/resources/com/bodosql/calcite/application/_generated_files/",
    "bodo/numba_compat.py",
    "bodo/mpi4py/",

    # TODO: Skip specific rules for these files
    "bodo/__init__.py",
    "bodo/types.py",
    "BodoSQL/bodosql/__init__.py",
    "iceberg/bodo_iceberg_connector/__init__.py",
    "bodo/pandas/__init__.py",
]

[tool.ruff.lint.flake8-tidy-imports]
# Ban slow compiler imports in bodo.pandas, bodo.spawn, bodo.ai, bodo.io.fs_io and bodo.io.parquet_pio
banned-module-level-imports = [
  "numba",
  "bodo.decorators",
  "bodo.compiler",
  "bodo.ext",
  "bodo.types",
  "bodo.libs",
  "bodo.hiframes",
  "bodo.ir",
  "bodo.pandas.utils_jit",
  "bodo.transforms",
  "bodo.ml_support",

  # All bodo.utils submodules except tracing
  "bodo.utils.conversion",
  "bodo.utils.python_310_bytecode_pass",
  "bodo.utils.del_column_utils",
  "bodo.utils.search_templates",
  "bodo.utils.aggregate_query_profiles",
  "bodo.utils.generate_docs",
  "bodo.utils.table_utils",
  "bodo.utils.transform",
  "bodo.utils.typing",
  "bodo.utils.allocation_tracking",
  "bodo.utils.indexing",
  "bodo.utils.pandas_coverage_tracking",
  "bodo.utils.testing",
  "bodo.utils.user_logging_ext",
  "bodo.utils.cg_helpers",
  "bodo.utils.py_objs",
  "bodo.utils.tracing_py",
  "bodo.utils.collect_coverage",
  "bodo.utils.utils",
]

[tool.ruff.lint.per-file-ignores]
# Only allow compiler-related imports (ignore TID253) in these files/dirs.
"bodo/pandas/utils_jit.py" = ["TID253"]
"bodo/compiler.py" = ["TID253"]
"bodo/decorators.py" = ["TID253"]
"bodo/sql_plan_cache.py" = ["TID253"]
"bodo/runtests_caching.py" = ["TID253"]

# IO modules except fs_io and parquet_pio
"bodo/io/iceberg/*" = ["TID253"]
"bodo/io/arrow_reader.py" = ["TID253"]
"bodo/io/csv_iterator_ext.py" = ["TID253"]
"bodo/io/h5.py" = ["TID253"]
"bodo/io/h5_api.py" = ["TID253"]
"bodo/io/helpers.py" = ["TID253"]
"bodo/io/np_io.py" = ["TID253"]
"bodo/io/parquet_write.py" = ["TID253"]
"bodo/io/snowflake.py" = ["TID253"]
"bodo/io/snowflake_write.py" = ["TID253"]
"bodo/io/stream_parquet_write.py" = ["TID253"]

"**/BodoSQL/*" = ["TID253"]
"**/e2e-tests/*" = ["TID253"]
"**/buildscripts/*" = ["TID253"]
"**/libs/*" = ["TID253"]
"**/hiframes/*" = ["TID253"]
"**/ir/*" = ["TID253"]
"**/utils/*" = ["TID253"]
"**/transforms/*" = ["TID253"]
"**/ml_support/*" = ["TID253"]
# TODO [BSE-5085]: avoid JIT imports in pytest utils files where not needed
"**/tests/*" = ["TID253"]

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"mpi4py".msg = "Use `bodo.mpi4py` instead of `mpi4py`"

[tool.ruff.lint.isort]
known-first-party = ["bodo", "bodosql", "BodoSQL/bodosql", "e2e-tests"]

[tool.ruff.format]
exclude = [
    "BodoSQL/calcite_sql/bodosql-calcite-application/src/test/resources/com/bodosql/calcite/application/_generated_files/",
]


# ------------------------------------ CIBuildWheel ------------------------------------ #
[tool.cibuildwheel]
# Disable building wheels for musllinux, i686 and power pc
# Don't publish linux arm until we can get nightly fixed
#skip = ["pp*", "*musllinux*", "*i686*"]
skip = ["pp*", "*musllinux*", "*i686*", "*-win32*"]
# Increase pip debugging output
build-verbosity = 1
build-frontend = { name = "pip" }

[tool.cibuildwheel.linux]
manylinux-x86_64-image = "quay.io/pypa/manylinux_2_28_x86_64:latest"
manylinux-aarch64-image = "quay.io/pypa/manylinux_2_28_aarch64:latest"
test-command = """
set -exo pipefail
BODO_NUM_WORKERS=2 python {project}/buildscripts/bodo/pip/test.py

# Check that only expected libs are included in the wheel
LIB_WHITELIST="^(libcom_err|libcrypto|libcurl|libgssapi_krb5|libhdf5|libk5crypto|libkeyutils|libkrb5support|libkrb5|libnghttp2|libs2n|libssh2|libssl|libsz|libzstd|libbrotli.*|libcrypt|libidn2|liblber-2|libpcre2|libpsl|libsasl2|libselinux|libssh|libunistring|libldap-2)-.*\\.so(\\.[0-9]+)*"
LIBS_DIR="$(pip show bodo | grep Location | awk -F 'Location: ' '{print $2}')/bodo.libs" && \
for file in "$LIBS_DIR"/*; do
    if [[ ! $(basename "$file") =~ $LIB_WHITELIST ]]; then
        echo "Unexpected shared object found: $file"
        exit 1
    fi
done
"""

[tool.cibuildwheel.macos]
# Can't use pytest because we don't include tests in the wheel
test-command = """
set -exo pipefail
BODO_NUM_WORKERS=2 python {project}/buildscripts/bodo/pip/test.py

# Check that only expected libs are included in the wheel
LIB_WHITELIST="^(libc\\+\\+|libcom_err|libcrypto|libcurl|libgssapi_krb5|libhdf5|libk5crypto|libkrb5support|libkrb5|libnghttp2|libssh2|libssl|libsz|libzstd|libz|libaws-.*)(\\.[0-9]+)*\\.dylib$"
DYLIBS_DIR="$(pip show bodo | grep Location | awk -F 'Location: ' '{print $2}')/bodo/.dylibs" && \
for file in $DYLIBS_DIR/*; do
    if [[ ! $(basename $file) =~ $LIB_WHITELIST ]]; then
        echo "Unexpected dylib found: $file"
        exit 1
    fi
done
"""

[tool.cibuildwheel.windows]
# Can't use pytest because we don't include tests in the wheel
test-command = """
set BODO_NUM_WORKERS=2 && python {project}\\buildscripts\\bodo\\pip\\test.py
"""

# ---------------------------------------- PR CI ---------------------------------------- #
[tool.coverage.run]
source = ["bodo"]
branch = true
relative_files = true
omit = [
    "bodo/mpi4py/*",
    "bodo/runtests.py",
    "bodo/tests/*",
    ".pixi",
]
