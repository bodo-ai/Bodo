[build-system]
requires = [
    "setuptools>=64",
    "setuptools_scm[toml]>=8",
    "scikit-build-core[pyproject]",
    "cython>=3.0,<3.1",
    "numpy>=1.24,<1.27",
    "pyarrow==17.0.0",
]
build-backend = "scikit_build_core.build"

[project]
name = "bodo"
dynamic = ["version"]
description = "The Python Supercomputing Analytics Platform"
readme = "README_pypi.md"
requires-python = ">=3.10,<3.13"
keywords = ["data", "analytics", "cluster"]
authors = [{ name = "Bodo.ai" }]

classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Operating System :: POSIX :: Linux",
    "Operating System :: MacOS :: MacOS X",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Compilers",
    "Topic :: System :: Distributed Computing",
]

dependencies = [
    "numba==0.60.0",
    "pyarrow==17.0.0",
    "pandas>=2.2,<2.3",
    "numpy>=1.24,<1.27",
    # fsspec >= 2021.09 because it includes Arrow filesystem wrappers (useful for fs.glob() for example)
    "fsspec>=2021.09",
    "requests",
    "cloudpickle>=3.0,<4.0",
]

[project.urls]
Homepage = "https://bodo.ai"
Documentation = "https://docs.bodo.ai"

[project.optional-dependencies]
hdf5 = ["h5py"]
sklearn = ["scikit-learn==1.4.*"]
plot = ["matplotlib <=3.8.2"]
s3fs = ["s3fs >=2022.1.0"]
adlfs = ["adlfs >=2022.1.0"]
gcsfs = ["gcsfs >=2022.1.0"]
snowflake = ["snowflake-connector-python"]
mysql = ["sqlalchemy", "PyMySQL"]
postgres = ["sqlalchemy", "psycopg2"]
oracle = ["sqlalchemy", "cx-Oracle", "libaio"]

# -------------------------- CMake Config -------------------------- #

# Must Include to Enable
[tool.setuptools_scm]

[tool.scikit-build]
cmake.version = ">=3.23"
strict-config = true
experimental = false
ninja.make-fallback = false
cmake.build-type = "Release"
build.verbose = false
logging.level = "INFO"

metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
build-dir = "build/type_{build_type}"
# Exclude bodo/transforms since it should be Cythonized in production builds
wheel.exclude = [
    "bodo/**/*.h",
    "bodo/**/*.cpp",
    "bodo/**/*.c",
    "bodo/**/*.pxd",
    "bodo/**/*.pyx",
    "bodo/**/*.hpp",
    "bodo/libs/HashLibs/TSL",
    "bodo/bench",
    "bodo/transforms/dataframe_pass.py",
    "bodo/transforms/distributed_analysis.py",
    "bodo/transforms/distributed_pass.py",
    "bodo/transforms/series_pass.py",
    "bodo/transforms/table_column_del_pass.py",
    "bodo/transforms/typing_pass.py",
    "bodo/transforms/untyped_pass.py",
    "bodo/transforms/**/*.pyc",
    "bodo/tests/*",
]

[tool.scikit-build.cmake.define]
MPICH_VERSION = "3.4.3"

# When building for Conda, set different
# arguments for CMake
[[tool.scikit-build.overrides]]
if.state = "editable"
cmake.build-type = "RelWithDebInfo"
wheel.exclude = [
    "bodo/**/*.h",
    "bodo/**/*.cpp",
    "bodo/**/*.c",
    "bodo/**/*.pxd",
    "bodo/**/*.pyx",
    "bodo/tests/data/**/*.crc",
    "bodo/libs/HashLibs/TSL",
    "bodo/bench",
]

# -------------------------------------- Dev Tools -------------------------------------- #
[tool.ruff]
unsafe-fixes = true
lint.extend-select = [
    "I",   # isort
    "UP",  # pyupgrade
    "C4",  # flake8-comprehensions
    "TID", # flake8-tidy-imports
]
lint.ignore = [
    # Permanently Disabled Rules
    "E501", # Line too long. Black should manage this only
    "E741", # Ambiguous variable name: {name}
    # Use X | Y instead of (X, Y) in isinstance
    # Disabled because:
    # - X | Y is slower than (X, Y), could be problematic in hot code paths
    # - (X, Y) is more readable and formattable
    # - Numba doesn't support X | Y
    "UP038",

    # TODO: Gradually Enable in Next PR
    # Flake8 Rules
    "F405", # {name} may be undefined, or defined from star imports
    "F811", # Redefinition of unused {name} from line
    "E402", # Module level import not at top of file
    "E711", # Comparison to `None` should be `cond is not None`
    "E712", # Comparison to `...` should be `cond is False` or `if not cond:`
    "E731", # Do not assign a `lambda` expression, use a `def`
]
exclude = [
    ".git/",

    # TODO: Couple of ISort Problems with this folder
    "bodo-platform-image/",

    "demo/",
    "examples/",
    "obfuscation/examples/",
    "BodoSQL/calcite_sql/bodosql-calcite-application/src/test/resources/com/bodosql/calcite/application/_generated_files/",
    "bodo/numba_compat.py",
    "bodo/mpi4py/",

    # TODO: Skip specific rules for these files
    "bodo/__init__.py",
    "BodoSQL/bodosql/__init__.py",
    "iceberg/bodo_iceberg_connector/__init__.py",
    "bodo/pandas/__init__.py",
]

[tool.ruff.lint.flake8-tidy-imports]
[tool.ruff.lint.flake8-tidy-imports.banned-api]
"mpi4py".msg = "Use `bodo.mpi4py` instead of `mpi4py`"

[tool.ruff.lint.isort]
known-first-party = ["bodo", "bodosql", "BodoSQL/bodosql", "e2e-tests"]

[tool.ruff.format]
exclude = [
    "BodoSQL/calcite_sql/bodosql-calcite-application/src/test/resources/com/bodosql/calcite/application/_generated_files/",
]


# ------------------------------------ CIBuildWheel ------------------------------------ #
[tool.cibuildwheel]
# Disable building PyPy wheels on all platforms
# Disable building wheels for musllinux
skip = ["pp*", "*musllinux*", "*i686*"]
manylinux-x86_64-image = "427443013497.dkr.ecr.us-east-2.amazonaws.com/cibuildwheel-manylinux:latest"
# Increase pip debugging output
build-verbosity = 1

[tool.cibuildwheel.linux]
build-frontend = { name = "pip", args = ["--no-build-isolation"] }

[tool.cibuildwheel.macos]
# Can't use pytest because we don't include tests in the wheel
test-command = """
mpiexec -n 2 python -c '\
import bodo
import pandas as pd
if bodo.get_rank() == 0:
    pd.DataFrame({"a": [1, 2, 3]}).to_parquet("test.parquet")
bodo.barrier()
@bodo.jit
def f():
    df = pd.read_parquet("test.parquet")
    return df.a.sum()
assert f() == 6' && \

# Check that only expected dylibs are included in the wheel
LIB_WHITELIST="^(libc\\+\\+|libcom_err|libcrypto|libcurl|libfftw3_mpi|libfftw3f_mpi|libfftw3|libfftw3f|libgssapi_krb5|libhdf5|libk5crypto|libkrb5support|libkrb5|libnghttp2|libssh2|libssl|libsz|libzstd|libz|libaws-.*)(\\.[0-9]+)*\\.dylib$"
DYLIBS_DIR="$(pip show  bodo | grep Location | awk -F 'Location: ' '{print $2}')/bodo/.dylibs" && \
for file in $DYLIBS_DIR/*; do
    if [[ ! $(basename $file) =~ $LIB_WHITELIST ]]; then
        echo "Unexpected dylib found: $file"
        exit 1
    fi
done
"""


[tool.coverage.run]
source = ["bodo"]
branch = true
relative_files = true
omit = [
    "bodo/mpi4py/*",
    "bodo/runtests.py",
    "bodo/tests/*",
    ".pixi",
]
