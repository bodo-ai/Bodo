name: Update images

on:
  workflow_dispatch:
    inputs:
      bodoVersion:
        description: Bodo Version (e.g. 2022.8) on the Platform to update
        required: true
      updatedBodoVersion:
        description: Bodo Version name you want to update to
        required: false
      deregisterImage:
        description: Deregister image ?
        type: boolean
        default: false
      updateDev:
        description: Update image in Dev environment
        type: boolean
        default: false
      updateTesting:
        description: Update image in Testing environment
        type: boolean
        default: false
      updateStaging:
        description: Update image in Staging environment
        type: boolean
        default: false
      updateProd:
        description: Update image in production environment
        type: boolean
        default: false

jobs:
  update-images-with-dev-platform:
    runs-on: ubuntu-latest
    if: github.event.inputs.updateDev == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: 3.8

      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install requests

      - name: Update Images with Dev Platform
        env:
          AUTH_SERVICE_URL: "https://bodo-dev.us.frontegg.com"
          BOT_PLATFORM_USERNAME: ${{ secrets.BOT_DEV_PLATFORM_USERNAME }}
          BOT_PLATFORM_PASSWORD: ${{ secrets.BOT_DEV_PLATFORM_PASSWORD }}
          BACKEND_SERVICE_URL: "https://api-dev.bodo.ai"
          ORGANIZATION_UUID: ${{ secrets.DEV_ORGANIZATION_UUID }}
          IMAGE_NAME: ${{ inputs.bodoVersion }}
          UPDATED_IMAGE_NAME: ${{ inputs.updatedBodoVersion }}
          UPDATE_IMAGE: true
        run: |
          cd bodo-platform-image
          sleep 5
          if [[ '${{ inputs.deregisterImage }}' == 'false' ]]; then
            python manage_images.py
          else
            python manage_images.py --deregister
          fi;

  update-images-with-testing-platform:
    runs-on: ubuntu-latest
    if: github.event.inputs.updateTesting == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: 3.8

      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install requests

      - name: Update Images with Testing Platform
        env:
          AUTH_SERVICE_URL: "https://bodo-test.us.frontegg.com"
          BOT_PLATFORM_USERNAME: ${{ secrets.BOT_TESTING_PLATFORM_USERNAME }}
          BOT_PLATFORM_PASSWORD: ${{ secrets.BOT_TESTING_PLATFORM_PASSWORD }}
          BACKEND_SERVICE_URL: "https://api-testing.bodo.ai"
          ORGANIZATION_UUID: ${{ secrets.TESTING_ORGANIZATION_UUID }}
          IMAGE_NAME: ${{ inputs.bodoVersion }}
          UPDATED_IMAGE_NAME: ${{ inputs.updatedBodoVersion }}
          UPDATE_IMAGE: true
        run: |
          cd bodo-platform-image
          sleep 5
          if [[ '${{ inputs.deregisterImage }}' == 'false' ]]; then
            python manage_images.py
          else
            python manage_images.py --deregister
          fi;

  update-images-with-staging-platform:
    runs-on: ubuntu-latest
    if: github.event.inputs.updateStaging == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: 3.8

      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install requests

      - name: Update Images with Platform
        env:
          AUTH_SERVICE_URL: "https://bodo-staging.us.frontegg.com"
          BOT_PLATFORM_USERNAME: ${{ secrets.BOT_STAGING_PLATFORM_USERNAME }}
          BOT_PLATFORM_PASSWORD: ${{ secrets.BOT_STAGING_PLATFORM_PASSWORD }}
          BACKEND_SERVICE_URL: "https://api-staging.bodo.ai"
          ORGANIZATION_UUID: ${{ secrets.STAGING_ORGANIZATION_UUID }}
          IMAGE_NAME: ${{ inputs.bodoVersion }}
          UPDATED_IMAGE_NAME: ${{ inputs.updatedBodoVersion }}
          UPDATE_IMAGE: true
        run: |
          cd bodo-platform-image
          sleep 5
          if [[ '${{ inputs.deregisterImage }}' == 'false' ]]; then
            python manage_images.py
          else
            python manage_images.py --deregister
          fi;
  update-images-with-prod-platform:
    runs-on: ubuntu-latest
    if: github.event.inputs.updateProd == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5.0.0
        with:
          python-version: 3.8

      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install requests

      - name: Update Images with Platform
        env:
          AUTH_SERVICE_URL: "https://bodo.us.frontegg.com"
          BOT_PLATFORM_USERNAME: ${{ secrets.BOT_PROD_PLATFORM_USERNAME }}
          BOT_PLATFORM_PASSWORD: ${{ secrets.BOT_PROD_PLATFORM_PASSWORD }}
          BACKEND_SERVICE_URL: "https://api.bodo.ai"
          ORGANIZATION_UUID: ${{ secrets.PROD_ORGANIZATION_UUID }}
          IMAGE_NAME: ${{ inputs.bodoVersion }}
          UPDATED_IMAGE_NAME: ${{ inputs.updatedBodoVersion }}
          UPDATE_IMAGE: true
        run: |
          cd bodo-platform-image
          sleep 5
          if [[ '${{ inputs.deregisterImage }}' == 'false' ]]; then
            python manage_images.py
          else
            python manage_images.py --deregister
          fi;
        
  notify-images-update:
    runs-on: ubuntu-latest
    if: ${{ success() &&  inputs.deregisterImage==false }}
    steps:
      - name: slack-send
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
            	"blocks": [
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "Bodo Image Update:\n${{ inputs.bodoVersion }} â†’ ${{ inputs.updatedBodoVersion }}\nDevelopment: ${{ inputs.updateDev }}\n Staging: ${{ inputs.updateStaging }}\nProduction: ${{ inputs.updateProd}}"
            			}
            		}
            	]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK

  notify-images-deregister:
    runs-on: ubuntu-latest
    if: ${{ success() &&  inputs.deregisterImage==true }}
    steps:
      - name: slack-send
        uses: slackapi/slack-github-action@v1.25.0
        with:
          payload: |
            {
            	"blocks": [
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "Bodo Image removed: ${{ inputs.bodoVersion }}\n Development: ${{ inputs.updateDev }}\n Staging: ${{ inputs.updateStaging }}\n Production: ${{ inputs.updateProd}}"
            			}
            		}
            	]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
