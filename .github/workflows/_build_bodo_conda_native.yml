name: Bodo Conda Build (Linux)
on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python Version to Build For'
        type: string
        required: true
      os:
        description: 'Operating System to Build On/For'
        type: string
        required: true
      platform-build:
        description: 'Build Platform Version of Bodo'
        required: false
        type: boolean
        default: false
      is-release:
        description: 'Is this a release build'
        required: false
        type: boolean
        default: false

jobs:
  build-bodo:
    defaults:
      run:
        shell: bash -l {0}

    runs-on: ${{ inputs.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      # Mac-Specific Setup
      - name: Install MacOS SDK
        if: ${{ contains(inputs.os, 'macos') }}
        run: ./buildscripts/setup_osx_sdk.sh
        env:
          MACOSX_DEPLOYMENT_TARGET: ${{ inputs.os == 'macos-13' && '10.15' || '11.0' }}

      # Regular Setup
      - name: Create Micromamba Environment
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: bodo_build
          create-args: conda-build anaconda-client python-libarchive-c setuptools_scm -c conda-forge
          cache-environment: true
          generate-run-shell: true
          init-shell: bash
      - name: Get Version
        run: |
          set -exo pipefail
          echo "BODO_VERSION=`python -m setuptools_scm`" >> $GITHUB_ENV
          echo "IS_RELEASE=`git tag --points-at HEAD`" >> $GITHUB_ENV
      - name: Obfuscate
        run: |
          micromamba create -y -n bodo_obfuscate python=3.11
          micromamba activate bodo_obfuscate
          set -exo pipefail         
          cd obfuscation
          ./do_obfuscation.py

      - name: Build Bodo Conda Package
        run: |
          set -exo pipefail
          cd buildscripts/bodo/bodo-conda-recipe

          # --no-verify because it doesn't work for Conda v2 packages
          # --no-anaconda-upload because we'll upload ourselves
          # Sccache works when the files are located in the same path.
          # Conda-Build normally uses a random path. Setting these args disables that.
          # --croot for consistent base directory path for sccache
          # --build-id-pat for consistent build directory path for sccache
          conda build . $PLATFORM_CHANNEL -c conda-forge \
            --no-verify --no-anaconda-upload \
            --croot $HOME/conda-bld --build-id-pat 'bb' \
            -e nightly_conda_build_config.yaml --python '${{ inputs.python-version }}'

          # Export Location for Artifacting
          echo "CONDA_BLD_PATH=$HOME/conda-bld" >> $GITHUB_ENV
        env:
          CONDA_SOLVER: libmamba
          # Sccache Creds
          AWS_ACCESS_KEY_ID: ${{ vars.SCCACHE_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.SCCACHE_AWS_SECRET_ACCESS_KEY }}
          # Platform specific
          CHECK_LICENSE_EXPIRED: ${{ (inputs.platform-build == true) && '0' || '1' }}
          CHECK_LICENSE_CORE_COUNT: ${{ (inputs.platform-build == true) && '0' || '1' }}
          CHECK_LICENSE_PLATFORM: ${{ (inputs.platform-build == true) && '1' || '0' }}
          BUILD_WITH_V8: ${{ (inputs.platform-build == true) && '1' || '0' }}
          PLATFORM_CHANNEL: ${{ (inputs.platform-build == true) && '-c bodo.ai' || '' }}

      - name: Upload Conda Package
        uses: actions/upload-artifact@v4
        with:
          name: bodo-conda-${{ inputs.python-version }}-${{ inputs.platform-build == true && 'platform' || inputs.os }}
          path: ${{ env.CONDA_BLD_PATH }}

      - name: Publish to Artifactory / Anaconda
        if: ${{ inputs.is-release }}
        run: |
          set -exo pipefail

          # Secrets File
          echo "${{ secrets.PUBLISH_BINARY_SECRETS }}" > $HOME/secret_file
          sudo chmod a+r $HOME/secret_file

          echo "BODO_VERSION: $BODO_VERSION"
          echo $ARTIFACTORY_CHANNEL
          ./buildscripts/bodo/azure/publish_binary.sh $ARTIFACTORY_CHANNEL "linux-64" $BODO_VERSION
        env:
          IS_RELEASE: ${{ inputs.is-release }}
          ARTIFACTORY_CHANNEL: ${{ format('bodo.ai{0}{1}', (inputs.platform-build == true) && '-platform' || '', (inputs.is-release) && '-dev' || '') }}
