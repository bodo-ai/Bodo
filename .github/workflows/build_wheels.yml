name: Build Wheels

on: 
  workflow_dispatch: 
  release:
      types: [published]


# Recommended with setup-micromamba
# https://github.com/mamba-org/setup-micromamba#about-login-shells
defaults:
  run:
    shell: bash -leo pipefail {0}

jobs:
  build_wheels:
    permissions:
      id-token: write
      contents: read
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        # macos-13 is an intel runner, macos-14 is apple silicon
        os: [macos-13, macos-14, ubuntu-latest]

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::427443013497:role/BodoEngineBuildWheelRole
          role-session-name: BodoEngineBuildWheelSession
          role-skip-session-tagging: true
      # Login to ECR so the linux build can pull the necessary image
      - name: Login to Amazon ECR
        id: login-ecr
        if: matrix.os == 'ubuntu-latest'
        uses: aws-actions/amazon-ecr-login@v2

      - uses: actions/checkout@v4
        with:
          # For setuptools_scm to be able to determine version,
          # we need to fetch the entire history
          fetch-depth: 0

      # https://github.com/actions/runner-images/issues/10624
      - name: Fix PATH in .bashrc
        if: matrix.os == 'macos-14'
        run: |
          sed -i '' '/; export PATH;/d' ~/.bashrc
          echo 'export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"' >> ~/.bashrc
          source ~/.bashrc


      # Set up the build conda environment
      - uses: mamba-org/setup-micromamba@v1
        if: contains(matrix.os, 'macos')
        with:
          environment-name: build-env
          environment-file: buildscripts/envs/conda-lock.yml
          cache-environment: true
          create-args: --category main --category dev
          init-shell: >-
            bash
            zsh
            powershell

      - name: Build wheels
        env: 
          CIBW_BEFORE_BUILD_MACOS: |
            rm -r {package}/bodo/mpi4py
            eval "$(micromamba shell hook --shell bash)" 
            micromamba deactivate
            micromamba deactivate
            PYTHON_VERSION=$(python --version | awk -F 'Python ' '{print$2}')
            micromamba activate build-env
            source {project}/buildscripts/bodo/pip/macos/setup_env.sh "$PYTHON_VERSION" {package}/buildscripts/envs/
          CIBW_BEFORE_BUILD_LINUX: |
            # Delete mpi4py folder if it exists so correct version gets copied in
            rm -r {package}/bodo/mpi4py
            PYTHON_VERSION=$(python --version | awk -F 'Python ' '{print$2}')
            ENVS_PATH={package}/buildscripts/envs
            OLD_PYTHON_DIR=$(cd $(dirname $(which python))/..; pwd)
            echo "OLD_PYTHON_DIR: $OLD_PYTHON_DIR"
            source {package}/buildscripts/bodo/pip/manylinux/setup_env.sh "${PYTHON_VERSION}" "${ENVS_PATH}"
            source ~/.bashrc
            NEW_PYTHON_DIR=$(cd $(dirname $(which python))/..; pwd)
            echo "NEW_PYTHON_DIR: $NEW_PYTHON_DIR"
            rm -rf $OLD_PYTHON_DIR
            ln -s $NEW_PYTHON_DIR $OLD_PYTHON_DIR
          CIBW_ENVIRONMENT: DISABLE_CCACHE=1 SCCACHE_BUCKET=engine-codebuild-cache SCCACHE_REGION=us-east-2 SCCACHE_S3_USE_SSL=true SCCACHE_S3_SERVER_SIDE_ENCRYPTION=true MACOSX_DEPLOYMENT_TARGET=${{ matrix.os == 'macos-14' && '11.0' || '10.15' }} BODO_VENDOR_MPICH=1
          CIBW_ENVIRONMENT_PASS_LINUX: AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN AWS_DEFAULT_REGION
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: 'delocate-wheel --ignore-missing-dependencies --sanitize-rpaths --exclude libmpi --exclude libpmpi --exclude libarrow --exclude libarrow_acero --exclude libarrow_dataset --exclude libarrow_flight --exclude libarrow_python --exclude libarrow_python_flight --exclude libarrow_python_parquet_encryption --exclude libarrow_substrait --exclude libparquet --require-archs {delocate_archs} -v {wheel} && python buildscripts/bodo/pip/macos/patch_libs_for_pip.py -p {wheel} && mv {wheel} {dest_dir}'
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: 'LD_LIBRARY_PATH=/opt/conda/lib:$LD_LIBRARY_PATH && auditwheel -v repair --exclude libmpi.so.12 --exclude libarrow.so.1700 --exclude libarrow_acero.so.1700 --exclude libarrow_dataset.so.1700 --exclude libarrow_python.so --exclude libparquet.so.1700 --plat manylinux_2_35_x86_64 {wheel} -w {dest_dir} && python buildscripts/bodo/pip/manylinux/patch_libs_for_pip.py -p {dest_dir}'
        run: pipx run cibuildwheel==2.20.*

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
          path: ./wheelhouse/*.whl

  test-linux:
    # The manylinux image we use to build the wheels can't install the wheels since it's too old. 
    # For this reason we test them separately
    runs-on: ubuntu-latest
    container:
      image: python:${{ matrix.python_version }}
    strategy:
      matrix:
        python_version: ["3.10", "3.11", "3.12"]
    needs: build_wheels
    steps:
      - uses: actions/download-artifact@v4
        id: download-artifact
        with:
          pattern: cibw-wheels-ubuntu-*
          path: .
      - name: Install
        run: |
          # Install bodo from the local wheel
          pip install bodo --find-links $(find . -name "cibw-wheels-*" -print) --no-index --no-deps 
          # Install dependencies from pypi
          pip install bodo
      - name: Test
        run: |
          mpiexec -n 2 python -c '\
          import bodo 
          import pandas as pd
          if bodo.get_rank() == 0:
              pd.DataFrame({"a": [1, 2, 3]}).to_parquet("test.parquet")
          bodo.barrier()
          @bodo.jit
          def f():
              df = pd.read_parquet("test.parquet")
              return df.a.sum()
          assert f() == 6' && \
          
          # Check that only expected dylibs are included in the wheel
          LIB_WHITELIST="^(libcom_err|libcrypto|libcurl|libfftw3_mpi|libfftw3f_mpi|libfftw3|libfftw3f|libgssapi_krb5|libhdf5|libk5crypto|libkeyutils|libkrb5support|libkrb5|libnghttp2|libs2n|libssh2|libssl|libsz|libzstd|libaws-.*)-.*\.so(\.[0-9]+)*"
          LIBS_DIR="$(pip show  bodo | grep Location | awk -F 'Location: ' '{print $2}')/bodo.libs" && \
          for file in $LIBS_DIR/*; do
              if [[ ! $(basename $file) =~ $LIB_WHITELIST ]]; then
                  echo "Unexpected shared object found: $file"
                  exit 1
              fi
          done

