name: Build Bodo Pip Wheel

on:
  workflow_call:
    inputs:
      os:
        description: 'Operating System to Build On/For'
        type: string
        required: true
      name:
        description: 'Name of the OS to Build For'
        type: string
        required: true
      bodo_version:
        description: 'Bodo Version to Build'
        type: string
        required: true
      python_version:
        description: 'Python Version to build for'
        type: string
        required: true

jobs:
  build_bodo_wheels:
    permissions:
      id-token: write
      contents: read
    name: Build Bodo Wheels for ${{ inputs.name }}
    runs-on: ${{ inputs.os }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::427443013497:role/BodoEngineBuildWheelRole
          role-session-name: BodoEngineBuildWheelSession
          role-skip-session-tagging: true
      - uses: actions/checkout@v4

      # https://github.com/actions/runner-images/issues/10624
      - name: Fix PATH in .bashrc
        if: inputs.name == 'macos-arm'
        run: |
          sed -i '' '/; export PATH;/d' ~/.bashrc
          # shellcheck disable=SC2016
          echo 'export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"' >> ~/.bashrc
          # shellcheck disable=SC1090
          source ~/.bashrc
      # We need Pixi to properly configure the C++ compilers for Mac
      # For Linux, we only need C++ dependencies, so installing it and updating
      # some of the envs is enough
      - name: Install Pixi for Compiler
        if: ${{ contains(inputs.os, 'macos') ||  contains(inputs.os, 'windows') }}
        uses: prefix-dev/setup-pixi@v0.8.11
        with:
          pixi-version: v0.40.2
          cache: true
          cache-write: ${{ github.event_name == 'schedule'}}
          environments: ${{ contains(inputs.os, 'macos') && 'pip-cpp-macos' || 'pip-cpp-win' }}
          activate-environment: true
      - name: Install Pixi Global Tools
        if: ${{ contains(inputs.os, 'macos') ||  contains(inputs.os, 'windows') }}
        run: |
          pixi global install sccache

      - name: Calculate CIBW_BUILD (Unix)
        if: runner.os != 'Windows'
        env:
          PYTHON_VERSION: ${{ inputs.python_version }}
        run: |
          CIBW_BUILD="cp$(echo $PYTHON_VERSION | sed 's/\.//')-*"
          echo "CIBW_BUILD=$CIBW_BUILD" >> $GITHUB_ENV

      - name: Calculate CIBW_BUILD (Windows)
        if: runner.os == 'Windows'
        env:
          PYTHON_VERSION: ${{ inputs.python_version }}
        shell: pwsh
        run: |
          $CIBW_BUILD = "cp$($env:PYTHON_VERSION -replace '\.', '')-*"
          echo "CIBW_BUILD=$CIBW_BUILD" >> $env:GITHUB_ENV

      - name: Build Wheels
        run: ${{ contains(inputs.os, 'macos') && 'pipx' || 'python3 -m pipx' }} run cibuildwheel==2.22.0
        env:
          CIBW_BEFORE_ALL_LINUX: |
            # Install Pixi and Environment
            curl -fsSL https://pixi.sh/install.sh | bash
            source ~/.bashrc
            # Global Tools
            pixi global install sccache ninja
            # Install dependencies available on package manager
            dnf install -y libcurl-devel zlib-devel openssl-devel libzstd-devel
            # Install boost
            if find /usr /lib /usr/local -name "libboost*" | grep -q .; then
              echo "Skipping boost, already installed"
            else
              curl --output boost_1_85_0.tar.xz 'https://github.com/boostorg/boost/releases/download/boost-1.85.0/boost-1.85.0-cmake.tar.xz' -L
              mkdir boost_1_85_0
              tar -xJf boost_1_85_0.tar.xz -C .
              (cd boost-1.85.0; ./bootstrap.sh --with-libraries=container,json,stacktrace; ./b2 install)
            fi
          # delvewheel is still relatively new and not installed by default
          # https://cibuildwheel.pypa.io/en/stable/options/#repair-wheel-command
          CIBW_BEFORE_BUILD_WINDOWS: >
            pip install delvewheel && 
            if exist "{package}\bodo\mpi4py\_vendored_mpi4py" rmdir /s /q "{package}\bodo\mpi4py\_vendored_mpi4py" && 
            if exist "{package}\build" rmdir /s /q "{package}\build"
          CIBW_BEFORE_BUILD_MACOS: |
            # Delete mpi4py folder if it exists so correct version gets copied in
            rm -r {package}/bodo/mpi4py/_vendored_mpi4py || true
            rm -rf {package}/build
            rm -f {package}/mpich.whl
          CIBW_BEFORE_BUILD_LINUX: |
            # Delete mpi4py folder if it exists so correct version gets copied in
            rm -r {package}/bodo/mpi4py/_vendored_mpi4py || true
            rm -rf {package}/build
            rm -f {package}/mpich.whl
            # Install mpich for mpi.h needed by mpi4py
            MPICH_VERSION=$(/opt/python/cp312-cp312/bin/python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["tool"]["scikit-build"]["cmake"]["define"]["MPICH_VERSION"])')
            pip install mpich=="$MPICH_VERSION" --default-timeout=100
          CIBW_ENVIRONMENT_WINDOWS: >
            DISABLE_CCACHE=1
            SCCACHE_BUCKET=engine-codebuild-cache
            SCCACHE_REGION=us-east-2
            SCCACHE_S3_USE_SSL=true
            SCCACHE_S3_SERVER_SIDE_ENCRYPTION=true
            BODO_VENDOR_MPI4PY=1
            BODO_WINDOWS_BUILD_TYPE="Release"
            SETUPTOOLS_SCM_PRETEND_VERSION=${{ inputs.bodo_version }}
          CIBW_ENVIRONMENT_MACOS: >
            DISABLE_CCACHE=1
            SCCACHE_BUCKET=engine-codebuild-cache
            SCCACHE_REGION=us-east-2
            SCCACHE_S3_USE_SSL=true
            SCCACHE_S3_SERVER_SIDE_ENCRYPTION=true
            MACOSX_DEPLOYMENT_TARGET=${{ inputs.name == 'macos-arm' && '12.0' || '11.0' }}
            BODO_VENDOR_MPICH=1
            BODO_VENDOR_MPI4PY=1
            PATH=$HOME/.pixi/bin:$PATH
            CONDA_PREFIX=$(pwd)/.pixi/envs/pip-cpp-macos-win
            SETUPTOOLS_SCM_PRETEND_VERSION=${{ inputs.bodo_version }}
          CIBW_ENVIRONMENT_LINUX: >
            PATH=$HOME/.pixi/bin/:$PATH
            CMAKE_MODULE_PATH=/usr/local/boost_1_85_0
            DISABLE_CCACHE=1
            SCCACHE_BUCKET=engine-codebuild-cache
            SCCACHE_REGION=us-east-2
            SCCACHE_S3_USE_SSL=true
            SCCACHE_S3_SERVER_SIDE_ENCRYPTION=true
            BODO_VENDOR_MPICH=1
            BODO_VENDOR_MPI4PY=1
            CONDA_PREFIX=""
            SETUPTOOLS_SCM_PRETEND_VERSION=${{ inputs.bodo_version }}
            NO_HDF5=1
          CIBW_ENVIRONMENT_PASS_LINUX: >
            AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY
            AWS_SESSION_TOKEN
            AWS_DEFAULT_REGION
          CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: >
            sccache --show-stats &&
            delvewheel repair --exclude impi.dll --exclude msmpi.dll
            --exclude arrow.dll --exclude arrow_acero.dll --exclude arrow_dataset.dll --exclude arrow_python.dll
            --exclude parquet.dll -v -w {dest_dir} {wheel} && 
            python buildscripts/bodo/pip/windows/patch_bodo_for_pip.py -p {dest_dir}
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            sccache --show-stats &&
            delocate-wheel --ignore-missing-dependencies --sanitize-rpaths
            -e libmpi -e libpmpi
            -e libarrow -e libarrow_acero -e libarrow_dataset -e libarrow_flight
            -e libarrow_python -e libarrow_python_flight -e libarrow_python_parquet_encryption
            -e libarrow_substrait -e libparquet
            --require-archs {delocate_archs} -v {wheel} &&
            python buildscripts/bodo/pip/macos/patch_libs_for_pip.py -p {wheel} &&
            mv {wheel} {dest_dir}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            sccache --show-stats && 
            auditwheel -v repair
            --exclude libmpi.so.12 --exclude libmpi.so.40
            --exclude libarrow.so.1900 --exclude libarrow_acero.so.1900 --exclude libarrow_dataset.so.1900
            --exclude libarrow_python.so.1900 --exclude libparquet.so.1900
            --exclude libaws-cpp-sdk-core.so --exclude libaws-crt-cpp.so --exclude libaws-c-mqtt.so.1.0.0
            --exclude libaws-c-event-stream.so.1.0.0 --exclude libaws-c-s3.so.0unstable --exclude libaws-c-auth.so.1.0.0
            --exclude libaws-c-http.so.1.0.0 --exclude libaws-c-io.so.1.0.0 --exclude libaws-c-cal.so.1.0.0
            --exclude libaws-checksums.so.1.0.0 --exclude libaws-c-compression.so.1.0.0
            --exclude libaws-c-sdkutils.so.1.0.0 --exclude libaws-c-common.so.1
            --exclude libs2n.so.1
            --plat manylinux_2_28_$(uname -m) {wheel} -w {dest_dir} &&
            python buildscripts/bodo/pip/manylinux/patch_libs_for_pip.py -p {dest_dir}
          CIBW_BUILD: ${{ env.CIBW_BUILD }}

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ inputs.name }}-${{ inputs.python_version }}
          path: ./wheelhouse/*.whl
