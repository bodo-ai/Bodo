name: Build Bodo Pip Wheel

on:
  workflow_call:
    inputs:
      os:
        description: 'Operating System to Build On/For'
        type: string
        required: true
      name:
        description: 'Name of the OS to Build For'
        type: string
        required: true
      bodo_version:
        description: 'Bodo Version to Build'
        type: string
        required: true

jobs:
  build_bodo_wheels:
    permissions:
      id-token: write
      contents: read
    name: Build Bodo Wheels for ${{ inputs.name }}
    runs-on: ${{ inputs.os }}

    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: us-east-2
          role-to-assume: arn:aws:iam::427443013497:role/BodoEngineBuildWheelRole
          role-session-name: BodoEngineBuildWheelSession
          role-skip-session-tagging: true
      - uses: actions/checkout@v4

      # https://github.com/actions/runner-images/issues/10624
      - name: Fix PATH in .bashrc
        if: inputs.name == 'macos-arm'
        run: |
          sed -i '' '/; export PATH;/d' ~/.bashrc
          # shellcheck disable=SC2016
          echo 'export PATH="/opt/homebrew/bin:/opt/homebrew/sbin:$PATH"' >> ~/.bashrc
          # shellcheck disable=SC1090
          source ~/.bashrc
      # We need Pixi to properly configure the C++ compilers for Mac
      # For Linux, we only need C++ dependencies, so installing it and updating
      # some of the envs is enough
      - name: Install Pixi for Compiler
        if: contains(inputs.os, 'macos')
        uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.36.0
          cache: true
          cache-write: ${{ github.event_name == 'schedule'}}
          environments: 'pip-cpp-macos'
          activate-environment: true
      - name: Install Pixi Global Tools
        if: contains(inputs.os, 'macos')
        run: |
          pixi global install sccache
      # TODO: Remove once the self-hosted runners use Ubuntu
      - name: Install Pipx on Self-Hosted Runner
        if: inputs.name == 'linux-arm'
        run: |
          sudo dnf install -y python3-pip
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath 

      - name: Build Wheels
        run: ${{ contains(inputs.os, 'macos') && 'pipx' || 'python3 -m pipx' }} run cibuildwheel==2.22.0
        env:
          CIBW_BEFORE_ALL_LINUX: |
            # Install Pixi and Environment
            curl -fsSL https://pixi.sh/install.sh | bash
            source ~/.bashrc
            # Global Tools
            pixi global install sccache
            # Install dependencies available on package manager
            yum install -y libcurl-devel zlib-devel openssl-devel libzstd-devel
            # Install boost
            if find /usr /lib /usr/local -name "libboost*" | grep -q .; then
              echo "Skipping boost, already installed"
            else
              curl --output boost_1_85_0.tar.xz 'https://github.com/boostorg/boost/releases/download/boost-1.85.0/boost-1.85.0-cmake.tar.xz' -L
              mkdir boost_1_85_0
              tar -xJf boost_1_85_0.tar.xz -C .
              (cd boost-1.85.0; ./bootstrap.sh --with-libraries=container,container_hash,json,stacktrace,uuid,lexical_cast; ./b2 install)
            fi
            # Install aws-sdk-cpp
            if find /usr /lib /usr/local -name "libaws*" | grep -q .; then
              echo "Skipping aws-sdk-cpp, already installed"
            else
              git clone --branch 1.11.472 --depth 1 --recurse-submodules --shallow-submodules https://github.com/aws/aws-sdk-cpp
              mkdir aws-sdk-cpp/build 
              (cd aws-sdk-cpp/build; cmake .. \
                -DCMAKE_BUILD_TYPE=Release \
                -DBUILD_ONLY="core;s3" \
                -DENABLE_TESTING=OFF \
                -DAUTORUN_UNIT_TESTS=OFF \
                -DCMAKE_PREFIX_PATH=/usr/local/ \
                -DCMAKE_INSTALL_PREFIX=/usr/local/;
                cmake --build . --config=Release; \
                cmake --install . --config=Release)
            fi
          CIBW_BEFORE_BUILD: |
            # Delete mpi4py folder if it exists so correct version gets copied in
            rm -r {package}/bodo/mpi4py || true
            rm -rf {package}/build
            rm -f {package}/mpich.whl
          CIBW_BEFORE_BUILD_LINUX: |
            # Delete mpi4py folder if it exists so correct version gets copied in
            rm -r {package}/bodo/mpi4py || true
            rm -rf {package}/build
            rm -f {package}/mpich.whl
            # Install mpich for mpi.h needed by mpi4py
            MPICH_VERSION=$(/opt/python/cp312-cp312/bin/python -c 'import tomllib; print(tomllib.load(open("pyproject.toml", "rb"))["tool"]["scikit-build"]["cmake"]["define"]["MPICH_VERSION"])')
            pip install mpich=="$MPICH_VERSION" -i https://pypi.anaconda.org/mpi4py/simple --default-timeout=100
          CIBW_ENVIRONMENT: >-
            DISABLE_CCACHE=1
            SCCACHE_BUCKET=engine-codebuild-cache
            SCCACHE_REGION=us-east-2
            SCCACHE_S3_USE_SSL=true
            SCCACHE_S3_SERVER_SIDE_ENCRYPTION=true
            MACOSX_DEPLOYMENT_TARGET=${{ inputs.name == 'macos-arm' && '12.0' || '10.15' }}
            BODO_VENDOR_MPICH=1
            PATH=$HOME/.pixi/bin:$PATH
            CONDA_PREFIX=$(pwd)/.pixi/envs/pip-cpp-macos
            SETUPTOOLS_SCM_PRETEND_VERSION=${{ inputs.bodo_version }}
          CIBW_ENVIRONMENT_LINUX: >
            CMAKE_MODULE_PATH=/usr/local/boost_1_85_0
            DISABLE_CCACHE=1
            SCCACHE_BUCKET=engine-codebuild-cache
            SCCACHE_REGION=us-east-2
            SCCACHE_S3_USE_SSL=true
            SCCACHE_S3_SERVER_SIDE_ENCRYPTION=true
            BODO_VENDOR_MPICH=1
            CONDA_PREFIX=""
            SETUPTOOLS_SCM_PRETEND_VERSION=${{ inputs.bodo_version }}
            NO_HDF5=1
          CIBW_ENVIRONMENT_PASS_LINUX: >
            AWS_ACCESS_KEY_ID
            AWS_SECRET_ACCESS_KEY
            AWS_SESSION_TOKEN
            AWS_DEFAULT_REGION
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: >
            delocate-wheel --ignore-missing-dependencies --sanitize-rpaths
            -e libmpi -e libpmpi
            -e libarrow -e libarrow_acero -e libarrow_dataset -e libarrow_flight
            -e libarrow_python -e libarrow_python_flight -e libarrow_python_parquet_encryption
            -e libarrow_substrait -e libparquet
            --require-archs {delocate_archs} -v {wheel} &&
            python buildscripts/bodo/pip/macos/patch_libs_for_pip.py -p {wheel} &&
            mv {wheel} {dest_dir}
          CIBW_REPAIR_WHEEL_COMMAND_LINUX: >
            LD_LIBRARY_PATH=/usr/local/lib64/:/project/.pixi/envs/pip-cpp-linux/lib:$LD_LIBRARY_PATH auditwheel -v repair 
            --exclude libmpi.so.12 --exclude libmpi.so.40 
            --exclude libarrow.so.1801 --exclude libarrow_acero.so.1801 --exclude libarrow_dataset.so.1801 
            --exclude libarrow_python.so --exclude libparquet.so.1801 
            --plat manylinux_2_28_$(uname -m) {wheel} -w {dest_dir} && 
            python buildscripts/bodo/pip/manylinux/patch_libs_for_pip.py -p {dest_dir}

      - uses: actions/upload-artifact@v4
        with:
          name: cibw-wheels-${{ inputs.name }}
          path: ./wheelhouse/*.whl
