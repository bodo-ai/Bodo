name: Publish images

on:
  push:
    branches:
      - develop
    paths:
      - "bodo-platform-image/**"
      - "buildscripts/envs/conda-lock.yml"

  pull_request:
    branches:
      - develop
    paths:
      - "bodo-platform-image/**"
      - "buildscripts/envs/conda-lock.yml"

  workflow_dispatch:
    inputs:
      pythonVersion:
        description: Python Version (e.g. 3.12)
        required: false
        default: "3.12"

      bodoVersion:
        description: Bodo Version (e.g. 2022.8)
        required: true

      publishDev:
        description: Share with the Dev/Testing platform.
        type: boolean
        default: true

      publishStaging:
        description: Share with the Staging platform.
        type: boolean
        default: false

      publishProduction:
        description: Share with the Production platform.
        type: boolean
        default: false

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      publishDev: ${{ steps.setup_variables.outputs.publishDev }}
      publishStaging: ${{ steps.setup_variables.outputs.publishStaging }}
      publishProduction: ${{ steps.setup_variables.outputs.publishProduction }}
      bodoVersion: ${{ steps.setup_variables.outputs.bodoVersion }}
      bodoSQLVersion: ${{ steps.setup_variables.outputs.bodoVersion }}
      icebergConnectorVersion: ${{ steps.setup_variables.outputs.bodoVersion }}
      bodoSQLCondaChannel: ${{ steps.setup_variables.outputs.bodoSQLCondaChannel }}
      bodoIcebergCondaChannel: ${{ steps.setup_variables.outputs.bodoIcebergCondaChannel }}
      pythonVersion: ${{ steps.setup_variables.outputs.pythonVersion }}
      pushImage: ${{ steps.setup_variables.outputs.pushImage }}
      buildName: ${{ steps.setup_variables.outputs.buildName }}
      skipCreateImages: ${{ steps.setup_variables.outputs.skipCreateImages }}
    steps:
      - name: Set variables
        id: setup_variables
        run: |
          if [[ "${{github.event_name}}" == "push" && "${{github.ref}}" == "refs/heads/develop" || "${{github.event_name}}" == "pull_request" ]]; then
            echo "publishDev=true" >> $GITHUB_OUTPUT
            echo "publishStaging=true" >> $GITHUB_OUTPUT
            echo "publishProduction=false" >> $GITHUB_OUTPUT

            wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
            chmod +x miniconda.sh
            ./miniconda.sh -b
            export PATH=$HOME/miniconda3/bin:$PATH
            sudo apt install -y jq
            # TODO: Remove label/dev and FULL_CHANNEL once everything is confirmed to work
            FULL_OUTPUT=$(conda search -f bodo -c bodo.ai -c bodo.ai/label/dev --json | jq .[][-1])
            FULL_CHANNEL=$(echo $FULL_OUTPUT | jq .channel --raw-output)
            OUT_CHANNEL="bodo.ai"

            BODO_VERSION=$(echo $FULL_OUTPUT | jq .version --raw-output)
            # ICEBERG_VERSION=${BODO_VERSION}
            echo "bodoVersion=$BODO_VERSION" >> $GITHUB_OUTPUT  
            echo "bodoSQLVersion=$BODO_VERSION" >> $GITHUB_OUTPUT 
            echo "icebergConnectorVersion=$BODO_VERSION" >> $GITHUB_OUTPUT

            echo "bodoSQLCondaChannel=$OUT_CHANNEL" >> $GITHUB_OUTPUT 
            echo "bodoIcebergCondaChannel=$OUT_CHANNEL" >> $GITHUB_OUTPUT

            echo "buildName=dev${BODO_VERSION}.b${{ github.run_number }}" >> $GITHUB_OUTPUT
          else
            echo "publishDev=${{ github.event.inputs.publishDev }}" >> $GITHUB_OUTPUT
            echo "publishStaging=${{ github.event.inputs.publishStaging }}" >> $GITHUB_OUTPUT
            echo "publishProduction=${{ github.event.inputs.publishProduction }}" >> $GITHUB_OUTPUT

            echo "bodoVersion=${{ github.event.inputs.bodoVersion }}" >> $GITHUB_OUTPUT
            echo "bodoSQLVersion=${{ github.event.inputs.bodoVersion}}" >> $GITHUB_OUTPUT
            echo "icebergConnectorVersion=${{ github.event.inputs.bodoVersion}}" >> $GITHUB_OUTPUT

            OUT_CHANNEL="bodo.ai"
            echo "bodoSQLCondaChannel=$OUT_CHANNEL" >> $GITHUB_OUTPUT 
            echo "bodoIcebergCondaChannel=$OUT_CHANNEL" >> $GITHUB_OUTPUT
            
            echo "buildName=${{ github.event.inputs.bodoVersion }}" >> $GITHUB_OUTPUT
          fi

          if [[ "${{github.event_name}}" == "workflow_dispatch" ]]; then
            echo "pushImage=true" >> $GITHUB_OUTPUT
            echo "skipCreateImages=false" >> $GITHUB_OUTPUT
          else
            echo "pushImage=false" >> $GITHUB_OUTPUT
            echo "skipCreateImages=true" >> $GITHUB_OUTPUT
          fi
          echo "Running workflow with following variables:"
          cat $GITHUB_OUTPUT

  build-worker:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      # TODO: make git_sha available everywhere needed instead of duplicating steps
      - name: get git_sha
        env:
          GIT_SHA: ${{ github.sha }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          git_sha=$(if [[ "$GITHUB_REF" =~ refs/tags/v* ]]; then tag=`echo $GITHUB_REF | cut -f3 -d/`; echo "$tag"; else echo "${GIT_SHA:0:7}"; fi)
          echo "SHA=${git_sha}" >> $GITHUB_ENV

      - name: Configure Azure Credentials
        uses: azure/login@v1
        with:
          creds: ${{  secrets.AZURE_CREDENTIALS  }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get Bodo Version from setup
        env:
          BODO_VERSION: ${{ needs.setup.outputs.bodoVersion }}
        run: |
          # Replace the version in the file with the user provided input
          echo "$BODO_VERSION" > bodo-platform-image/bodo_versions.txt

      - name: Create Azure Image definition
        # For event that is not workflow, we skip the image creation in the build step,
        # and therefore this step is not required.
        uses: azure/CLI@v1.0.9
        if: |
          needs.setup.outputs.pushImage == 'true' &&
          needs.setup.outputs.skipCreateImages == 'false'
        env:
          GIT_SHA: ${{ env.SHA }}
        with:
          azcliversion: 2.30.0
          inlineScript: |
            $GITHUB_WORKSPACE/bodo-platform-image/scripts/azure/create_image_definition.sh \
              --image-sha ${GIT_SHA} \
              --node-role worker

      - uses: actions/setup-python@v4
        with:
          python-version: '3.12' 

      # We can't use conda-lock directly because it can't install to the base environment
      # Thus, we need to generate Conda-style .lock file first
      - name: Generate Lock File for Platform Build
        run: |
          pip install conda-lock
          conda-lock render -k env -p linux-64 --no-dev-dependencies $GITHUB_WORKSPACE/buildscripts/envs/conda-lock.yml
          cp conda-linux-64.lock.yml $GITHUB_WORKSPACE/bodo-platform-image/ansible/roles/worker_deps/files/conda-linux-64.lock.yml

      - name: Save Lock File to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: lock-file
          path: conda-linux-64.lock.yml

      - name: Build Images
        id: build
        env:
          GITHUB_REF: ${{ github.ref }}
          GITHUB_EVENT: ${{ github.event_name }}
          BOT_GITHUB_USERNAME: ${{ secrets.BOT_GITHUB_USERNAME }}
          BOT_GITHUB_TOKEN: ${{ secrets.BOT_GITHUB_TOKEN }}
          CONDA_USERNAME: ${{ secrets.CONDA_USERNAME }}
          CONDA_TOKEN: ${{ secrets.CONDA_TOKEN }}
          CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          GIT_SHA: ${{ env.SHA }}
          SKIP_CREATE_IMAGES: ${{ needs.setup.outputs.skipCreateImages }}
          PYTHON_VERSION: ${{ github.event.inputs.pythonVersion  }}
          BODO_VERSION: ${{ needs.setup.outputs.bodoSQLVersion }}
          BUILD_NAME: ${{ needs.setup.outputs.buildName }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          cd bodo-platform-image
          cd packer
          arguments=$(if [ "$SKIP_CREATE_IMAGES" == 'true' ]; then echo "--skip-create-images"; fi)
          bash build_images_and_gen_manifests.sh \
            $arguments \
            --image-sha $GIT_SHA \
            --node-role worker \
            --playbook-file worker_playbook.yaml \
            --build-name $BUILD_NAME

      - name: Upload Packer Manifest
        uses: actions/upload-artifact@v4
        with:
          name: worker-manifest
          path: bodo-platform-image/packer/worker_manifest_*.json

  combine-manifest-gen-ami-entries:
    needs: [setup, build-worker]
    if: needs.setup.outputs.skipCreateImages == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Worker Packer Manifest
        uses: actions/download-artifact@v4
        with:
          name: worker-manifest
          path: bodo-platform-image/

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Combine manifests and create AMI Add and Share JSON
        env:
          GIT_SHA: ${{ github.sha }}
        run: |
          cd bodo-platform-image
          python gen_images_entries_from_manifests.py

      - name: Upload Image Entries Request JSON
        uses: actions/upload-artifact@v4
        with:
          name: img-entries-request-json
          path: bodo-platform-image/img_share_requests.json

  # TESTING
  share-images-with-testing-platform:
    needs: [setup, combine-manifest-gen-ami-entries]
    if: |
      needs.setup.outputs.pushImage == 'true' &&
      needs.setup.outputs.publishDev == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install requests

      - name: Download Image Entries Request JSON
        uses: actions/download-artifact@v4
        with:
          name: img-entries-request-json
          path: bodo-platform-image/

      - name: Share Images with Testing Platform
        id: share
        env:
          AUTH_SERVICE_URL: "https://bodo-test.us.frontegg.com"
          BOT_PLATFORM_USERNAME: ${{ secrets.BOT_TESTING_PLATFORM_USERNAME }}
          BOT_PLATFORM_PASSWORD: ${{ secrets.BOT_TESTING_PLATFORM_PASSWORD }}
          BACKEND_SERVICE_URL: "https://api-testing.bodo.ai"
          ORGANIZATION_UUID: ${{ secrets.TESTING_ORGANIZATION_UUID }}
        run: |
          sleep 120
          cd bodo-platform-image
          python manage_images.py

  # DEVELOPMENT
  share-images-with-dev-platform:
    needs: [setup, combine-manifest-gen-ami-entries]
    if: |
      needs.setup.outputs.pushImage == 'true' &&
      needs.setup.outputs.publishDev == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install requests

      - name: Download Image Entries Request JSON
        uses: actions/download-artifact@v4
        with:
          name: img-entries-request-json
          path: bodo-platform-image/

      - name: Share Images with Dev Platform
        id: share
        env:
          AUTH_SERVICE_URL: "https://bodo-dev.us.frontegg.com"
          BOT_PLATFORM_USERNAME: ${{ secrets.BOT_DEV_PLATFORM_USERNAME }}
          BOT_PLATFORM_PASSWORD: ${{ secrets.BOT_DEV_PLATFORM_PASSWORD }}
          BACKEND_SERVICE_URL: "https://api-dev.bodo.ai"
          ORGANIZATION_UUID: ${{ secrets.DEV_ORGANIZATION_UUID }}
        run: |
          sleep 120
          cd bodo-platform-image
          python manage_images.py

  # STAGING
  share-images-with-staging-platform:
    needs: [setup, combine-manifest-gen-ami-entries]
    if: |
      needs.setup.outputs.pushImage == 'true' &&
      needs.setup.outputs.publishStaging == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install requests

      - name: Download Image Entries Request JSON
        uses: actions/download-artifact@v4
        with:
          name: img-entries-request-json
          path: bodo-platform-image/

      - name: Share Images with Staging Platform
        id: share
        env:
          AUTH_SERVICE_URL: "https://bodo-staging.us.frontegg.com"
          BOT_PLATFORM_USERNAME: ${{ secrets.BOT_STAGING_PLATFORM_USERNAME }}
          BOT_PLATFORM_PASSWORD: ${{ secrets.BOT_STAGING_PLATFORM_PASSWORD }}
          BACKEND_SERVICE_URL: "https://api-staging.bodo.ai"
          ORGANIZATION_UUID: ${{ secrets.STAGING_ORGANIZATION_UUID }}
        run: |
          sleep 120
          cd bodo-platform-image
          python manage_images.py

  # PRODUCTION
  share-images-with-prod-platform:
    needs: [setup, combine-manifest-gen-ami-entries]
    if: |
      needs.setup.outputs.pushImage == 'true' &&
      needs.setup.outputs.publishProduction == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: "Install dependencies"
        run: |
          set -xe
          python -VV
          python -m site
          python -m pip install requests

      - name: Download Image Entries Request JSON
        uses: actions/download-artifact@v4
        with:
          name: img-entries-request-json
          path: bodo-platform-image/

      - name: Share Images with Prod Platform
        id: share
        env:
          AUTH_SERVICE_URL: "https://bodo.us.frontegg.com"
          BOT_PLATFORM_USERNAME: ${{ secrets.BOT_PROD_PLATFORM_USERNAME }}
          BOT_PLATFORM_PASSWORD: ${{ secrets.BOT_PROD_PLATFORM_PASSWORD }}
          BACKEND_SERVICE_URL: "https://api.bodo.ai"
          ORGANIZATION_UUID: ${{ secrets.PROD_ORGANIZATION_UUID }}
        run: |
          sleep 120
          cd bodo-platform-image
          python manage_images.py
