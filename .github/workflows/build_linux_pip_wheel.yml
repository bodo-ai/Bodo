name: Build Linux Pip Wheels for Releases (Currently Python 3.11 only)
on:

  # Run When Called by another workflow (called by test_linux_pip_wheel)
  workflow_call:
    secrets:
      SELF_HOSTED_AWS_ACCESS_KEY_ID:
        required: true
      SELF_HOSTED_AWS_SECRET_ACCESS_KEY:
        required: true

  # Manual Trigger
  workflow_dispatch:


# Recommended with setup-micromamba
# https://github.com/mamba-org/setup-micromamba#about-login-shells
defaults:
  run:
    shell: bash -leo pipefail {0}


jobs:
  py311:
    name: Build Python 3.11 Wheel
    runs-on: [self-hosted, large]
    container:
      #TODO: return this to a manylinux container eventually
      image: ubuntu:22.04
      options: --cpus 8
      volumes:
        - my_docker_volume:/vmnt
    steps:

      # Update CA certs and install git. Needed for the ubuntu container, may be
      # possible to remove when moving back to manylinux container.
      - name: Update CA certs and install git
        run: |
          apt-get update
          apt-get install -y ca-certificates
          apt-get install -y git

      # Set up the build conda environment
      - uses: mamba-org/setup-micromamba@v1
        with:
          environment-name: build-env
          create-args: >-
            python=3.11
            conda-build
            anaconda-client
            python-libarchive-c
            setuptools_scm>=8
            auditwheel
          generate-run-shell: true
          init-shell: bash
          condarc: |
            channels:
              - conda-forge
            remote_max_retries: 5
            remote_backoff_factor: 60
            aggressive_update_packages: []


      - uses: actions/checkout@v4
        with:
          # For setuptools_scm to be able to determine version,
          # we need to fetch the entire history
          fetch-depth: 0



      # Build the wheel via conda build
      - name: Build Bodo
        run: |
          # For some strange reason, sccache doesn't work in the conda build environment
          # I've tried a number of different combinations of roles/credentials, and none of them work,
          # So for now I'm just exporting a flag to disable sccache
          export DISABLE_SCCACHE_IN_BUILD=1
          export BODO_VERSION=`python -m setuptools_scm`
          cd buildscripts/bodo/bodo-conda-recipe/
          conda build . -c conda-forge --python 3.11 \
            --croot /home/ubuntu/cbuild -b --dirty --no-test -e pip_build_config.yaml


      - name: export wheel base as artifact
        run: |
          set -x
          export WORK_PATH=`ls -d /home/cbuild/bodo_*/work`
          export BUILD_PATH=`ls -d $WORK_PATH/build/cp*/`
          ls $BUILD_PATH
          # Temporarily allow cat to fail
          cat $BUILD_PATH.ninja_log || true

          # Copy Wheel for Artifacting
          ls -alh /tmp/wheelhouse
          cp -r /tmp/wheelhouse /vmnt/

      - name: Artifact Base Bodo Wheel
        uses: actions/upload-artifact@v4
        with:
          name: bodo-wheel-base
          path: /vmnt/


      - name: Run Auditwheel Repair and handle manual patching
        run: |
          set -x

          # TODO: This is a temporary fix to get the build working
          # First, activate the conda build environment
          micromamba activate /home/ubuntu/cbuild/bodo_*/_h_env_*


          # Set LD_LIBRARY_PATH to include the pyarrow library
          export OLD_LD_PATH=$LD_LIBRARY_PATH
          export PYARROW_LIBRARY_DIR=`python -c "import pyarrow; print(pyarrow.get_library_dirs()[0])"`
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$PYARROW_LIBRARY_DIR

          # Reactivate the conda build environment we created at the start of the script,
          # since that's where we have auditwheel installed
          micromamba activate build-env
          auditwheel repair --plat manylinux_2_35_x86_64 /tmp/wheelhouse/bodo-*.whl

          # reset LD_LIBRARY_PATH to avoid any issues
          export LD_LIBRARY_PATH=$OLD_LD_PATH

          # Copy New Wheel for Artifacting
          rm -rf /vmnt/wheelhouse
          cp -r wheelhouse/ /vmnt/

      # Note: if you change the name of the artifact, you must also change the name in the test_linux_pip_wheel.yml
      - name: Artifact Bodo Final Wheel
        uses: actions/upload-artifact@v4
        with:
          name: bodo-wheel-fixed
          path: /vmnt/wheelhouse

  #TODO: enable non-python 3.11 builds
