# Copied from BodoSQL
parameters:
    name: ''
    vmImage: ''
    BODO_CHANNEL_NAME: ''

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 240
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.9'
    displayName: 'Use Python 3.9'

  # For M1, need to set MACOSX_DEPLOYMENT_TARGET to 11 before calling setup_osx_sdk, since it defaults to using 10.15
  # if the value is not set. We need at least SDK 11 to do cross compilation
  - script: |
      if [[ "${{ parameters.name }}" == "macOS" ]]; then
        buildscripts/setup_osx_sdk.sh
      elif [[ "${{ parameters.name }}" = "macOS_ARM" ]]; then
        export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-11.0}
        buildscripts/setup_osx_sdk.sh
      fi
    displayName: 'Setup OSX SDK'

  - script: |
      set -eo pipefail
      buildscripts/iceberg/install.sh
    env:
      CONDA_ENV:  build_iceberg_connector
      PYTHON_VERSION: '3.9'
      TARGET_NAME: ${{ parameters.name }}
    displayName: 'Setup Conda Installation + Dependencies'

  - task: DownloadSecureFile@1
    name: secret_file
    displayName: 'Download Secrets File'
    inputs:
      secureFile: 'publish_binary_secrets'

  # Taken from code in the Numba feedstock that handles cross compiling,
  # and is necessary to enable it, but its not clear what this does.
  # This is an open issue, BE-1568, to investigate this.
  - script: |
      set -eo pipefail
      if [[ "${{ parameters.name }}" == "macOS_ARM" ]]; then
        export PATH=$HOME/miniforge3/bin:${PATH}
        export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-11.0}
        export CONDA_BUILD_SYSROOT="/opt/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk"
        source activate build_iceberg_connector
        conda install -n build_iceberg_connector --quiet --yes "conda-forge-ci-setup=3" -c conda-forge
        setup_conda_rc ./ ./buildscripts/iceberg/m1-conda-recipe ./buildscripts/iceberg/m1-conda-recipe/conda_build_config.yaml
        /usr/bin/sudo mangle_homebrew
        /usr/bin/sudo -k
        source run_conda_forge_build_setup
      fi
    displayName: 'Handling Setup for Cross Compilation'

  - script: |
      set -eo pipefail
      sudo chmod a+r $(secret_file.secureFilePath)
      sudo cp $(secret_file.secureFilePath) $HOME/secret_file
      if [[ "${{ parameters.name }}" = Linux* ]]; then
        artifactory_os_dir="linux-64"
      elif [[ "${{ parameters.name }}" = "macOS_ARM" ]]; then
        artifactory_os_dir="osx-arm64"
      else
        artifactory_os_dir="osx-64"
      fi
      artifactory_channel=`./buildscripts/azure/get_channel.sh`
      echo "artifactory_channel: $artifactory_channel"
      if [[ "${{ parameters.name }}" = "macOS_ARM" ]]; then
        export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-11.0}
      fi
      ./buildscripts/iceberg/publish_binary.sh $artifactory_channel $artifactory_os_dir
    env:
      BODO_CHANNEL_NAME: 'bodo.ai'
      TARGET_NAME: ${{ parameters.name }}
    displayName: 'Conda Build and Publish Binary to Artifactory'
