parameters:
- name: name
  type: string
  default: ''
- name: pool
  displayName: Pool Config
  type: object
  default: ScalingVMSet
- name: buildMac
  type: boolean
  default: false
- name: buildARM
  type: boolean
  default: false
- name: platformBuild
  type: boolean
  default: false
- name: weeklyTest
  type: boolean
  default: false
- name: uploadArtifactory
  type: boolean
  default: true
- name: pythonVersion
  type: string
  default: ''

jobs:
- job: ${{ parameters.name }}
  variables:
    - group: AWS-427-S3-Access-Keys
  timeoutInMinutes: 360
  pool: ${{ parameters.pool }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
      # Github Token used to download python from the GitHub registry if it doesn't already exist locally.
      # This is currently @Keaton's github token. If you need to change it, you can use anyone's token
      # that has access to the GitHub registry.
      # To change this variable, go to the pipeline (from which this template is being invoked), 
      # click on the 'Edit' --> 'Variables', and then you should be able to edit the
      # GITHUB_REGISTRY_DL_TOKEN variable.
      githubToken: $(GITHUB_REGISTRY_DL_TOKEN)
    displayName: 'Use Python 3.8'

  - script: |
      set -exo pipefail
      pip install setuptools_scm

      export BODO_VERSION=`python -m setuptools_scm`
      echo "##vso[task.setvariable variable=BODO_VERSION]$BODO_VERSION"
      echo "BODO_VERSION: $BODO_VERSION"

      export IS_RELEASE=`git tag --points-at HEAD`
      echo "##vso[task.setvariable variable=IS_RELEASE]$IS_RELEASE"
      echo "IS_RELEASE: $IS_RELEASE"
    displayName: 'Get Bodo Version and Release Tag (if any)'

  - script: |
      set -exo pipefail
      pip install ruff
      ruff .
    displayName: 'Ruff'

  - script: |
      set -exo pipefail
      pip install astor
      cd obfuscation
      ./do_obfuscation.py
    displayName: 'Obfuscation'
    condition: and(succeeded(), eq(variables.OBFUSCATE, 1))

  - script: |
      set -exo pipefail
      if [[ ! -z $IS_RELEASE ]]; then
        ## Remove existing tag if it's a release
        git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' tag -d $IS_RELEASE
      fi

      ## Commit the changes after obfuscation
      git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' add .
      git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' commit --no-verify -a --amend --no-edit

      if [[ ! -z $IS_RELEASE ]]; then
        ## Tag new commit with the old tag, if it's a release
        git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' tag -a $IS_RELEASE -m $IS_RELEASE
      fi
    displayName: 'Amend Commit to Remove Dirty from Version'

  - script: |
      set -exo pipefail
      unamestr=`uname`

      if [[ "$unamestr" == 'Linux' ]]; then
        wget https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-Linux-x86_64.sh -O mambaforge.sh
      else
        wget https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-MacOSX-x86_64.sh -O mambaforge.sh
      fi
      chmod +x mambaforge.sh
      bash mambaforge.sh -b

      export PATH=$HOME/mambaforge/bin:$PATH
    displayName: 'Setup Mambaforge'

  # For M1, need to set MACOSX_DEPLOYMENT_TARGET to 11 before calling setup_osx_sdk, since it defaults to using 10.15
  # if the value is not set. We need at least SDK 11 to do cross compilation.
  - script: |
      set -exo pipefail
      # Check if running x86 Build
      if [[ "${{ parameters.buildARM }}" == "True" ]]; then
        export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-11.0}
      fi
      buildscripts/setup_osx_sdk.sh
    condition: eq('${{ parameters.buildMac }}', 'true')
    displayName: 'Setup OSX SDK'

  - script: |
      set -exo pipefail
      export PATH=$HOME/mambaforge/bin:$PATH
      mamba create -y -n bodo_build conda-build anaconda-client conda-verify python-libarchive-c -c conda-forge
    displayName: 'Create Mamba Env'

  # It was taken from code in the Numba feedstock that handles cross compiling,
  # and is necessary to enable it,
  # but I (Keaton) don't fully understand what it's doing
  # I've filed a JIRA issue to figure this out later BE-1568
  - script: |
      set -exo pipefail

      export PATH=$HOME/mambaforge/bin:$PATH
      export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-11.0}
      export CONDA_BUILD_SYSROOT="/opt/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk"

      set +x
      source activate bodo_build
      set -x

      mamba install -y "conda-forge-ci-setup=3" -c conda-forge
      setup_conda_rc ./ ./buildscripts/bodo/bodo-m1-conda-recipe ./buildscripts/bodo/bodo-m1-conda-recipe/release_conda_build_config.yaml
      /usr/bin/sudo mangle_homebrew
      /usr/bin/sudo -k

      set +x
      source run_conda_forge_build_setup
    condition: and(eq('${{ parameters.buildMac }}', 'true'), eq('${{ parameters.buildARM }}', 'true'))
    displayName: 'Setup for Cross Compilation'

  - script: |
      set -eo pipefail
      export PATH=$HOME/mambaforge/bin:$PATH
      source activate bodo_build
      set -x

      mkdir env
      mamba env export | tee env/environment.yml
      mamba list --explicit > env/package-list.txt
      pip list | tee env/requirements.txt
    continueOnError: true
    displayName: Export Environment Spec

  - script: |
      set -exo pipefail
      export PATH=$HOME/mambaforge/bin:$PATH
      unamestr=`uname`

      # macOS_ARM
      if [[ "$unamestr" == 'Darwin' ]] && [[ "${{ parameters.buildARM }}" == "True" ]]; then
        export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-11.0}
      else
        export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-10.15}
      fi

      export CONDA_BUILD_SYSROOT="/opt/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk"
      set +x
      source activate bodo_build
      set -x

      # macOS_ARM
      if [[ "$unamestr" == 'Darwin' ]] && [[ "${{ parameters.buildARM }}" == "True" ]]; then
        cd buildscripts/bodo/bodo-m1-conda-recipe/
      else
        cd buildscripts/bodo/bodo-conda-recipe/
      fi

      if [[ "${{ parameters.platformBuild }}" == "True" ]]; then
        export CHECK_LICENSE_EXPIRED="0"
        export CHECK_LICENSE_CORE_COUNT="0"
        export CHECK_LICENSE_PLATFORM="1"
      else
        export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
        export CHECK_LICENSE_CORE_COUNT=$(CHECK_LICENSE_CORE_COUNT)
      fi

      # release and weekly conda variant file builds Python 3.10/3.11/3.12,
      # but the nightly one and the platform release only builds only Python 3.12 (nightly tests and platform build only use 3.12)
      if ([[ ! -z $IS_RELEASE ]] || [[ "${{ parameters.weeklyTest }}" == "True" ]]) && [[ "${{ parameters.platformBuild }}" != "True" ]]; then
        export CONDA_VARIANT_ARG="-e release_conda_build_config.yaml"
      else
        export CONDA_VARIANT_ARG="-e nightly_conda_build_config.yaml"
      fi

      if [ -n "${{ parameters.pythonVersion }}" ]; then
        export BUILD_PY_VERSION="--python ${{ parameters.pythonVersion }}"
      else
        export BUILD_PY_VERSION=""
      fi

      # --no-test because we'll test ourselves
      # --no-verify because it doesn't work for Conda v2 packages
      # --no-anaconda-upload because we'll upload ourselves

      # Sccache works best when the files are located in the same path. 
      # Conda-Build normally adds a random hash to the path. Setting these args disables that.
      # --croot for consistent base directory path for sccache
      #     we can't use the default working directory because thats the current folder
      # --build-id-pat for consistent build directory path for sccache

      # --keep-old-work --dirty --merge-build-host for keeping all intermediate files around
      conda build . -c conda-forge \
        --no-test --no-verify --no-anaconda-upload \
        $CONDA_VARIANT_ARG $BUILD_PY_VERSION \
        --croot $HOME/conda-bld --build-id-pat='bb'
      
      # TODO: Add back for Pip
      # --keep-old-work --dirty --merge-build-host

      # Copy the Build Folder to Working Directory
      cp -r $HOME/conda-bld $(System.DefaultWorkingDirectory)/conda-bld
    env:
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    displayName: 'Build Bodo'

  # Publish the Conda build folder as an artifact
  # Azure Pipelines doesn't have a convenient way to find the home directory
  # So we copy the build folder to the working directory first
  - publish: $(System.DefaultWorkingDirectory)/conda-bld/
    displayName: 'Publish to Pipeline Artifacts'
    artifact: Bodo-CondaPkg-${{ parameters.name }}

  - task: DownloadSecureFile@1
    name: secret_file
    inputs:
      secureFile: 'publish_binary_secrets'
    displayName: 'Download Secrets File'
    condition: and(succeeded(), eq('${{ parameters.uploadArtifactory }}', 'true'))

  - script: |
      set -exo pipefail
      echo "BODO_VERSION: $BODO_VERSION"
      sudo chmod a+r $(secret_file.secureFilePath)
      sudo cp $(secret_file.secureFilePath) $HOME/secret_file
      cd $(System.DefaultWorkingDirectory)
      mkdir bodo-inc
      echo "IS_RELEASE: $IS_RELEASE"
      export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
      export OBFUSCATE=$(OBFUSCATE)
      if [[ "${{ parameters.platformBuild }}" == "True" ]]; then
        export CHECK_LICENSE_EXPIRED="0"
        export CHECK_LICENSE_CORE_COUNT="0"
        export CHECK_LICENSE_PLATFORM="1"
        export PLATFORM_DEV_RELEASE=$(PLATFORM_DEV_RELEASE)
      else
        export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
        export CHECK_LICENSE_CORE_COUNT=$(CHECK_LICENSE_CORE_COUNT)
        export PLATFORM_DEV_RELEASE="false"
      fi
      artifactory_channel=`./buildscripts/get_channel.sh $PLATFORM_DEV_RELEASE`
      echo "artifactory_channel: $artifactory_channel"

      unamestr=`uname`
      if [[ "$unamestr" == 'Linux' ]]; then
        artifactory_os_dir="linux-64"
      else
        if [[ "${{ parameters.buildARM }}" == "True" ]]; then
          artifactory_os_dir="osx-arm64"
        else
          artifactory_os_dir="osx-64"
        fi
      fi
      echo "artifactory_os_dir: $artifactory_os_dir"

      # We build non-Linux packages only for releases and weekly runs, see conda-build command
      ./buildscripts/bodo/azure/publish_binary.sh $artifactory_channel $artifactory_os_dir $BODO_VERSION
    displayName: 'Publish to Artifactory / Anaconda'
    condition: and(succeeded(), eq('${{ parameters.uploadArtifactory }}', 'true'))
    retryCountOnTaskFailure: 5
    continueOnError: true
