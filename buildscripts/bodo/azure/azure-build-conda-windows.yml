parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 90
  dependsOn: find_suffix
  variables:
    suffix: $[ dependencies.find_suffix.outputs['suffix_step.fileSuffix'] ]
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    displayName: 'Use Python $(python.version)'

  - bash: |
      set -eo pipefail

      export BODO_VERSION=`python -m setuptools_scm`
      echo "##vso[task.setvariable variable=BODO_VERSION]$BODO_VERSION"
      echo "BODO_VERSION: $BODO_VERSION"

      export IS_RELEASE=`git tag --points-at HEAD`
      echo "##vso[task.setvariable variable=IS_RELEASE]$IS_RELEASE"
      echo "IS_RELEASE: $IS_RELEASE"
    displayName: 'Get Bodo Version and Release Tag (if any)'

  - bash: |
      set -eo pipefail
      pip install astunparse
    displayName: 'Prepare to build'

  - powershell: |
        Write-Host "##vso[task.prependpath]$env:CONDA\Scripts"
        Write-Host "##vso[task.prependpath]$HOME/miniconda3/bin"
    displayName: 'Add conda to PATH'

  - script: conda install -y -q -n base conda=4.12
    displayName: 'Update conda'

  - bash: |
      set -eo pipefail
      conda install -y ruff conda=4.12
      ruff .
    displayName: 'Ruff'

  - bash: |
      set -eo pipefail
      conda create -y -n bodo_build conda-build anaconda-client conda=4.12
    displayName: 'Create Conda Env'

  - bash: |
      set -eo pipefail
      source activate bodo_build
      if [[ $OBFUSCATE == 1 ]]; then
        conda install -y astor conda=4.12 -c conda-forge
        cd obfuscation
        ./do_obfuscation.py
      else
        echo "Skipping Obfuscation"
      fi
    displayName: 'Obfuscation'

  - bash: |
      set -eo pipefail
      if [[ ! -z $IS_RELEASE ]]; then
        ## Remove existing tag if it's a release
        git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' tag -d $IS_RELEASE
      fi

      ## Commit the changes after obfuscation
      git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' add .
      git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' commit --no-verify -a --amend --no-edit

      if [[ ! -z $IS_RELEASE ]]; then
        ## Tag new commit with the old tag, if it's a release
        git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' tag -a $IS_RELEASE -m $IS_RELEASE
      fi
    displayName: 'Amend Commit to remove dirty from version'

  - bash: |
      set -eo pipefail
      source activate bodo_build
      ## Copy OpenSSL DLLs to bodo source directory to bundle them in package
      cp `cygpath -u $CONDA_PREFIX`/Library/bin/libssl-*-x64.dll bodo/libs
      cp `cygpath -u $CONDA_PREFIX`/Library/bin/libcrypto-*-x64.dll bodo/libs
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        cd buildscripts/bodo/bodo-numba-dev-conda-recipe/
        echo "Using Numba-Dev Conda Recipe"
      else
        cd buildscripts/bodo/bodo-conda-recipe/
      fi
      export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
      export CHECK_LICENSE_CORE_COUNT=$(CHECK_LICENSE_CORE_COUNT)
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        conda build . -c numba/label/dev -c conda-forge --no-test
        echo "Using numba/label/dev channel"
      else
        conda build . -c conda-forge --no-test
      fi
    displayName: 'Conda build Bodo'

  - task: DownloadSecureFile@1
    name: secret_file
    displayName: 'Download secrets file'
    inputs:
      secureFile: 'publish_binary_secrets'

  - bash: |
      set -eo pipefail
      echo "BODO_VERSION: $BODO_VERSION"
      cp `cygpath -u "$(secret_file.secureFilePath)"` $HOME/secret_file
      cd `cygpath -u "$(System.DefaultWorkingDirectory)"`
      mkdir bodo-inc
      echo "IS_RELEASE: $IS_RELEASE"
      export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
      export OBFUSCATE=$(OBFUSCATE)
      export CHECK_LICENSE_CORE_COUNT=$(CHECK_LICENSE_CORE_COUNT)
      export PLATFORM_DEV_RELEASE="false"
      artifactory_channel=`./buildscripts/get_channel.sh $PLATFORM_DEV_RELEASE`
      echo "artifactory_channel: $artifactory_channel"
      artifactory_os_dir="win-64"
      echo "artifactory_os_dir: $artifactory_os_dir"
      ./buildscripts/bodo/azure/publish_binary.sh $artifactory_channel $artifactory_os_dir $BODO_VERSION

    displayName: 'publish bodo binary to Artifactory'
