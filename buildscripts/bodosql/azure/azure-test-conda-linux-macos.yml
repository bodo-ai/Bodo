parameters:
- name: name
  type: string
  default: ''
- name: CONDA_ENV
  type: string
  default: ''
- name: matrix
  type: object
  default: []
- name: CACHE_TEST
  type: boolean
  default: false
- name: SPAWN_MODE_TEST
  type: boolean
  default: false
- name: BODO_STREAMING_ENABLED
  type: number
  default: 0

jobs:
- job: ${{ parameters.name }}
  variables:
    - group: AWS-427-S3-Access-Keys
    - group: SnowflakeCredentials
    - group: TabularCredentials
  timeoutInMinutes: 360
  pool: ScalingVMSet
  strategy:
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps:
  # TODO: Use Micromamba when it supports remote_max_retries
  - script: |
      set -exo pipefail
      curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh"
      bash Miniforge3-$(uname)-$(uname -m).sh -b
    displayName: 'Install Miniforge'

  - bash: echo "##vso[task.prependpath]$HOME/miniforge3/bin"
    displayName: Add Mamba to PATH

  - script: |
      conda config --set remote_max_retries 5
      conda config --set remote_backoff_factor 60
      # Ensure that conda/mamba install/update/remove commands
      # do not try to mutate the environment beyond what's required.
      conda config --add aggressive_update_packages nodefaults
    displayName: 'Set Conda Config'

  - script: |
      source activate base
      mamba install -y pip
      pip install pipx
      pipx run conda-lock install --dev -n ${{ parameters.CONDA_ENV }} $(System.DefaultWorkingDirectory)/buildscripts/envs/conda-lock.yml
    displayName: 'Create Mamba Env'

  - script: |
      set -eo pipefail
      source activate ${{ parameters.CONDA_ENV }}
      set -x

      # Enable Sccache to use and save C/C++ cache to S3
      # TODO: Should we move directly into CMake?
      export SCCACHE_BUCKET=engine-codebuild-cache
      export SCCACHE_REGION=us-east-2
      export SCCACHE_S3_USE_SSL=true
      export SCCACHE_S3_SERVER_SIDE_ENCRYPTION=true
      export SCCACHE_LOG=debug
      # We should just use sccache directly on CI
      export DISABLE_CCACHE=1
      pip install --no-deps --no-build-isolation -Cbuild.verbose=true -ve .

      cd $(System.DefaultWorkingDirectory)/BodoSQL
      pip install --no-deps --no-build-isolation -ve .
      cd $(System.DefaultWorkingDirectory)/iceberg
      pip install --no-deps --no-build-isolation -ve .
    env:
      CONDA_ENV:  ${{ parameters.CONDA_ENV }}
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
    displayName: 'Build Bodo, BodoSQL, and Iceberg Connector'

  - script: |
      set -eo pipefail
      source activate ${{ parameters.CONDA_ENV }}
      set -x

      mkdir env
      mamba env export | tee env/environment.yml
      mamba list --explicit > env/package-list.txt
      pip list | tee env/requirements.txt
    continueOnError: true
    displayName: Export Environment Spec

  - script: |
      set -eo pipefail
      source activate ${{ parameters.CONDA_ENV }}
      set -x

      wget -q -O - "https://adlsresources.blob.core.windows.net/adlsresources/hadoop-3.3.2.tar.gz" | sudo tar -xzf - -C /opt
      cd azurefs-sas-token-provider
      pip install --no-deps --no-build-isolation -ve .
    displayName: "Setup Snowflake ADLS Testing (only Linux)"
    retryCountOnTaskFailure: 5

  - script: |
      set -eo pipefail
      source activate ${{ parameters.CONDA_ENV }}
      set -x
      python -c "import bodo; print(bodo.__version__)"
      python -c "import bodosql; print(bodosql.__version__)"

      unamestr=`uname`
      if [[ "$unamestr" == 'Linux' ]]; then
        echo "Setting up Hadoop (and Arrow) environment variables"
        export HADOOP_HOME=/opt/hadoop-3.3.2
        export HADOOP_INSTALL=$HADOOP_HOME
        export HADOOP_MAPRED_HOME=$HADOOP_HOME
        export HADOOP_COMMON_HOME=$HADOOP_HOME
        export HADOOP_HDFS_HOME=$HADOOP_HOME
        export YARN_HOME=$HADOOP_HOME
        export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
        export HADOOP_OPTS='-Djava.library.path=$HADOOP_HOME/lib'
        export HADOOP_OPTIONAL_TOOLS=hadoop-azure
        export ARROW_LIBHDFS_DIR=$HADOOP_HOME/lib/native
        export CLASSPATH=`$HADOOP_HOME/bin/hdfs classpath --glob`
      else
        echo "Skipping hadoop/arrow env var setup"
      fi

      cd $(System.DefaultWorkingDirectory)/BodoSQL
      # For caching tests we need to update the location of the decryption file.
      # We set the absolute path as an environment variable.
      export BODO_TRACING_DECRYPTION_FILE_PATH=`echo "$(System.DefaultWorkingDirectory)/obfuscation/decompress_traces.py"`
      if [[ "${{ parameters.CACHE_TEST }}" == "True" ]]; then
        python -u -m bodosql.runtests_caching "${{ parameters.name }}" "$(NP)" bodosql/tests/caching_tests/
      elif [[ "${{ parameters.SPAWN_MODE_TEST }}" == "True" ]]; then
        export BODO_TEST_SPAWN_MODE=1
        export BODO_NUM_WORKERS="$NP"
        pytest -s -v -p no:faulthandler -Wignore -m "$(PYTEST_MARKER)" bodosql/tests --junitxml=pytest-report-sql-spawn-mode.xml --test-run-title="${{ parameters.name }}"
      else
        python -u -m bodosql.runtests "${{ parameters.name }}" "$(NP)" -s -v -p no:faulthandler -m "$(PYTEST_MARKER)" bodosql/tests/
      fi
    env:
      SF_USERNAME: $(SNOWFLAKE_USER)
      SF_PASSWORD: $(SNOWFLAKE_PASSWORD)
      SF_AZURE_USER: $(SF_AZURE_USER)
      SF_AZURE_PASSWORD: $(SF_AZURE_PASSWORD)
      TABULAR_CREDENTIAL: $(TABULAR_CREDENTIAL)
      AZURE_STORAGE_ACCOUNT_NAME: $(AZURE_ICEBERG_STORAGE_ACCOUNT)
      AZURE_STORAGE_ACCOUNT_KEY: $(AZURE_ICEBERG_ACCESS_KEY)
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      AWS_REGION: us-east-1
      BODO_STREAMING_ENABLED: ${{ parameters.BODO_STREAMING_ENABLED }}
      BODO_SPAWN_MODE: "0"
    displayName: 'Test BodoSQL'
