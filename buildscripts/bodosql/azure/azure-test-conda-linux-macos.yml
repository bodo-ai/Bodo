parameters:
- name: name
  type: string
  default: ''
- name: CONDA_ENV
  type: string
  default: ''
- name: matrix
  type: object
  default: []
- name: CACHE_TEST
  type: boolean
  default: false
- name: BODO_STREAMING_ENABLED
  type: number
  default: 0

jobs:
- job: ${{ parameters.name }}
  variables:
    - group: AWS-427-S3-Access-Keys
    - group: SnowflakeCredentials
  timeoutInMinutes: 360
  pool: ScalingVMSet
  strategy:
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps:
  # TODO: Use Micromamba when it supports remote_max_retries
  - script: |
      set -exo pipefail
      curl -L -O "https://github.com/conda-forge/miniforge/releases/latest/download/Mambaforge-$(uname)-$(uname -m).sh"
      bash Mambaforge-$(uname)-$(uname -m).sh -b
    displayName: 'Install Mambaforge'

  - bash: echo "##vso[task.prependpath]$HOME/mambaforge/bin"
    displayName: Add Mamba to PATH

  - script: |
      conda config --set remote_max_retries 5
      conda config --set remote_backoff_factor 60
      # Ensure that conda/mamba install/update/remove commands
      # do not try to mutate the environment beyond what's required.
      conda config --add aggressive_update_packages nodefaults
    displayName: 'Set Conda Config'

  - script: |
      source activate base
      mamba install -y pip
      pip install pipx
      pipx run conda-lock install --dev -n ${{ parameters.CONDA_ENV }} $(System.DefaultWorkingDirectory)/buildscripts/envs/conda-lock.yml
    displayName: 'Create Mamba Env'

  - download: current
    artifact: Bodo-CondaPkg-Linux

  - download: current
    artifact: BodoSQL-CondaPkg

  - script: |
      set -eo pipefail
      source activate ${{ parameters.CONDA_ENV }}
      set -x

      export BODO_BODOSQL_VERSION=`python -m setuptools_scm`
      cd $(System.DefaultWorkingDirectory)

      CIN="mamba install -y --no-update-deps"
      $CIN bodo=$BODO_BODOSQL_VERSION -c $(Pipeline.Workspace)/Bodo-CondaPkg-Linux/ -c conda-forge
      $CIN bodosql=$BODO_BODOSQL_VERSION -c $(Pipeline.Workspace)/BodoSQL-CondaPkg/ -c conda-forge
    env:
      CONDA_ENV:  ${{ parameters.CONDA_ENV }}
    displayName: 'Install Bodo and BodoSQL'

  - script: |
      set -eo pipefail
      source activate ${{ parameters.CONDA_ENV }}
      set -x

      cd $(System.DefaultWorkingDirectory)/iceberg
      pip install -v .
    displayName: "Build Iceberg Connector"

  - script: |
      set -eo pipefail
      source activate ${{ parameters.CONDA_ENV }}
      set -x

      mkdir env
      mamba env export | tee env/environment.yml
      mamba list --explicit > env/package-list.txt
      pip list | tee env/requirements.txt
    continueOnError: true
    displayName: Export Environment Spec

  - script: |
      set -exo pipefail
      mkdir -p $HOME/bodo-inc
      cd $HOME/bodo-inc
      mkdir bodosql

      unamestr=`uname`
      if [[ "$unamestr" == 'Linux' ]]; then
        cp -avr $(System.DefaultWorkingDirectory)/BodoSQL/bodosql/tests bodosql/
      else
        cp -r $(System.DefaultWorkingDirectory)/BodoSQL/bodosql/tests bodosql
      fi

      # Remove Originals in case we run from the working directory
      # to catch any mistakes faster.
      rm -rf $(System.DefaultWorkingDirectory)/bodo/
      rm -rf $(System.DefaultWorkingDirectory)/BodoSQL/
    displayName: 'Copy Tests and Test Data'

  - script: |
      set -eo pipefail
      source activate ${{ parameters.CONDA_ENV }}
      set -x

      wget -q -O - "https://www.apache.org/dyn/mirrors/mirrors.cgi?action=download&filename=hadoop/common/hadoop-3.3.2/hadoop-3.3.2.tar.gz" | sudo tar -xzf - -C /opt
      cd azurefs-sas-token-provider
      python setup.py develop
    displayName: "Setup Snowflake ADLS Testing (only Linux)"
    retryCountOnTaskFailure: 5

  - task: DownloadSecureFile@1
    name: testLicense
    inputs:
      secureFile: 'bodo.lic'
    displayName: 'Download Test License'

  - script: |
      set -eo pipefail
      source activate ${{ parameters.CONDA_ENV }}
      set -x
      python -c "import bodo; print(bodo.__version__)"
      python -c "import bodosql; print(bodosql.__version__)"

      sudo chmod a+r $(testLicense.secureFilePath)
      sudo cp $(testLicense.secureFilePath) $HOME/bodo-inc

      unamestr=`uname`

      if [[ "$unamestr" == 'Linux' ]]; then
        echo "Setting up Hadoop (and Arrow) environment variables"
        export HADOOP_HOME=/opt/hadoop-3.3.2
        export HADOOP_INSTALL=$HADOOP_HOME
        export HADOOP_MAPRED_HOME=$HADOOP_HOME
        export HADOOP_COMMON_HOME=$HADOOP_HOME
        export HADOOP_HDFS_HOME=$HADOOP_HOME
        export YARN_HOME=$HADOOP_HOME
        export HADOOP_COMMON_LIB_NATIVE_DIR=$HADOOP_HOME/lib/native
        export HADOOP_OPTS='-Djava.library.path=$HADOOP_HOME/lib'
        export HADOOP_OPTIONAL_TOOLS=hadoop-azure
        export ARROW_LIBHDFS_DIR=$HADOOP_HOME/lib/native
        export CLASSPATH=`$HADOOP_HOME/bin/hdfs classpath --glob`
      else
        echo "Skipping hadoop/arrow env var setup"
      fi

      cd $HOME/bodo-inc
      cp `python -c "import bodosql; print(bodosql.__file__[:-11])"`pytest.ini .
      # For caching tests we need to update the location of the decryption file.
      # We set the absolute path as an environment variable.
      export BODO_TRACING_DECRYPTION_FILE_PATH=`echo "$(System.DefaultWorkingDirectory)/obfuscation/decompress_traces.py"`
      if [[ "${{ parameters.CACHE_TEST }}" == "True" ]]; then
        python -u -m bodosql.runtests_caching "${{ parameters.name }}" "$(NP)" bodosql/tests/caching_tests/
      else
        python -u -m bodosql.runtests "${{ parameters.name }}" "$(NP)" -s -v -p no:faulthandler -m "$(PYTEST_MARKER)" bodosql/tests/
      fi
    env:
      SF_USERNAME: $(SNOWFLAKE_USER)
      SF_PASSWORD: $(SNOWFLAKE_PASSWORD)
      SF_AZURE_USER: $(SF_AZURE_USER)
      SF_AZURE_PASSWORD: $(SF_AZURE_PASSWORD)
      AZURE_ICEBERG_STORAGE_ACCOUNT: $(AZURE_ICEBERG_STORAGE_ACCOUNT)
      AZURE_ICEBERG_ACCESS_KEY: $(AZURE_ICEBERG_ACCESS_KEY)
      AWS_ACCESS_KEY_ID: $(AWS_ACCESS_KEY_ID)
      AWS_SECRET_ACCESS_KEY: $(AWS_SECRET_ACCESS_KEY)
      AWS_REGION: us-east-1
      BODO_STREAMING_ENABLED: ${{ parameters.BODO_STREAMING_ENABLED }}
    displayName: 'Test BodoSQL'
