parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 120
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - script: |
      set -eo pipefail

      export BODO_VERSION=`python -c "import versioneer; print(versioneer.get_version())"`
      echo "##vso[task.setvariable variable=BODO_VERSION]$BODO_VERSION"
      echo "BODO_VERSION: $BODO_VERSION"

      export IS_RELEASE=`git tag --points-at HEAD`
      echo "##vso[task.setvariable variable=IS_RELEASE]$IS_RELEASE"
      echo "IS_RELEASE: $IS_RELEASE"
      export IS_MAJOR_RELEASE=0
      if [[ -n "$IS_RELEASE" ]]; then
        export IS_MAJOR_RELEASE=`python -c "import os; print(int(len(os.environ[\"IS_RELEASE\"].split(\".\")) < 3))"`
      fi
      echo "##vso[task.setvariable variable=IS_MAJOR_RELEASE]$IS_MAJOR_RELEASE"
    displayName: 'Get Bodo Version and Release Tag (if any)'

  - task: DownloadSecureFile@1
    name: pypi_secret_file
    displayName: 'Download pypi secrets file'
    inputs:
      secureFile: 'pypi_secrets'

  - script: |
      set -eo pipefail
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh
      chmod +x miniconda.sh
      bash miniconda.sh -b
      export PATH=$HOME/miniconda3/bin:${PATH}
    displayName: 'Setup Miniconda'

  - script: |
      set -eo pipefail
      buildscripts/setup_osx_sdk.sh
    displayName: 'Setup OSX SDK'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
      export CHECK_LICENSE_CORE_COUNT=$(CHECK_LICENSE_CORE_COUNT)
      export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-10.15}
      if [[ "$IS_MAJOR_RELEASE" == 1 ]] && [[ $OBFUSCATE == 1 ]]; then
        # get secrets
        sudo cp $(pypi_secret_file.secureFilePath) $HOME/pypi_secret_file
        cd $(System.DefaultWorkingDirectory)
        PYPI_TOKEN=`cat $HOME/pypi_secret_file | grep pypi.token | cut -f 2 -d' '`

        # save the PyPI username and password to ~/.pypirc for twine to pick it up
        echo -e "[pypi]\nusername = __token__ \npassword = ${PYPI_TOKEN}" > .pypirc

        # Generate the wheels
        ./buildscripts/pip/macos-x86/generate_macos_wheels.sh
      fi
    displayName: 'Build and publish pip wheel'
