parameters:
  name: ''
  vmImage: ''
  matrix: []

jobs:
- job: ${{ parameters.name }}
  variables:
    - group: SnowflakeCredentials
  timeoutInMinutes: 240
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    maxParallel: 11
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    displayName: 'Use Python $(python.version)'

  - script: |
      set -eo pipefail
      bash buildscripts/setup_conda.sh
      export PATH=$HOME/miniconda3/bin:$PATH
    displayName: 'Setup Miniconda'

  - script: |
      unamestr=`uname`
      uname_mach_str=`uname -m`
      # macOS
      if [[ "$unamestr" == 'Darwin' ]] && [[ "$uname_mach_str" == 'x86_64' ]]; then
        buildscripts/setup_osx_sdk.sh
      fi
    displayName: 'Setup OSX SDK'

  - script: |
      buildscripts/setup_minio.sh
    displayName: 'Setup minio'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      # s3fs is required by pandas for S3 IO
      # Cap the botocore version at 1.20.105 because 1.20.106 is incompatable
      # with fsspec.
      conda install -y -c conda-forge fsspec>=2021.09 boto3 botocore=1.20.105 s3fs
    displayName: 'Setup s3_testing'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      pip install deltalake
    displayName: 'Setup deltalake testing'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      conda install -y -c conda-forge pymysql sqlalchemy snowflake-sqlalchemy
      conda install -y -c conda-forge snowflake-connector-python --force --no-deps
    displayName: 'Setup MySQL + Snowflake Testing'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      python setup.py develop --no-ccache
    displayName: 'Build'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      conda install -y flake8
      flake8 bodo
    displayName: 'Flake8'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      pip install pytest pytest-azurepipelines pytest-cov pytest-timeout
      unamestr=`uname`
      if [[ ("$NP" -eq 1) && ( "$unamestr" == "Linux") ]]; then
        python bodo/runtests.py "$NP" -s -v -m "$(PYTEST_MARKER)" --cov-report= --cov=./ bodo/tests/
      else
        python bodo/runtests.py "$NP" -s -v -m "$(PYTEST_MARKER)" bodo/tests/
      fi
    env:
      SF_USERNAME: $(SNOWFLAKE_USER)
      SF_PASSWORD: $(SNOWFLAKE_PASSWORD)
      SF_USER2: $(SNOWFLAKE_USER2)
      SF_PASSWORD2: $(SNOWFLAKE_PASSWORD2)
    displayName: 'Test'
