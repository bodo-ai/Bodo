parameters:
  name: ''
  vmImage: ''
  caching_test: false
  PYTHON_VERSION: ''
  matrix: []

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 360
  variables:
    - group: SnowflakeCredentials
  pool:
    vmImage: ${{ parameters.vmImage }}
  strategy:
    maxParallel: 11
    matrix:
      ${{ insert }}: ${{ parameters.matrix }}

  steps:

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    displayName: 'Use Python $(python.version)'

  - script: |
      set -eo pipefail
      if [[ "${{ parameters.name }}" == "Linux" || "${{ parameters.name }}" == "Linux_cache" ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh
      fi
      chmod +x miniconda.sh
      ./miniconda.sh -b
      export PATH=$HOME/miniconda3/bin:${PATH}
      conda create -y -n $CONDA_ENV python=$PYTHON_VERSION mamba -c conda-forge
      source activate $CONDA_ENV
    displayName: 'Download miniconda and create conda env'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      source activate $CONDA_ENV
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        mamba install -y numba -c numba/label/dev
        echo "Using Numba-Dev"
      else
        echo "Skipping..."
      fi
    displayName: 'Install Numba-Dev'

  - task: DownloadSecureFile@1
    name: secret_file
    displayName: 'Download secrets file'
    inputs:
      secureFile: 'publish_binary_secrets'

  - script: |
      set -eo pipefail
      sudo chmod a+r $(secret_file.secureFilePath)
      sudo cp $(secret_file.secureFilePath) $HOME/secret_file
      export PATH=$HOME/miniconda3/bin:${PATH}
      source activate $CONDA_ENV
      export CHECK_LICENSE_PLATFORM=$(CHECK_LICENSE_PLATFORM)
      export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
      export OBFUSCATE=$(OBFUSCATE)
      if [[ "${{ parameters.platformBuild }}" == "true" ]]; then
        export PLATFORM_DEV_RELEASE=$(PLATFORM_DEV_RELEASE)
      else
        export PLATFORM_DEV_RELEASE="false"
      fi
      export BODO_VERSION=`python -c "import versioneer; print(versioneer.get_version())"`
      cd $(System.DefaultWorkingDirectory)
      ./buildscripts/azure/install_bodo.sh $BODO_VERSION $PLATFORM_DEV_RELEASE
    displayName: 'Install Bodo from conda'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      source activate $CONDA_ENV
      conda list -f numba
    displayName: 'Check Numba Version'

  - script: |
      set -eo pipefail
      mkdir -p $HOME/bodo-inc
      cd $HOME/bodo-inc
      mkdir bodo
      if [[ "${{ parameters.name }}" == "Linux" || "${{ parameters.name }}" == "Linux_cache" ]]; then
        cp -avr $(System.DefaultWorkingDirectory)/bodo/tests bodo
      else
        cp -r $(System.DefaultWorkingDirectory)/bodo/tests bodo
      fi
    displayName: 'Copy test data'

  - script: |
      buildscripts/setup_minio.sh
    displayName: 'Setup minio'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      # s3fs is required by pandas for S3 IO
      # Cap the botocore version at 1.20.105 because 1.20.106 is incompatable
      # with fsspec.
      mamba install -y -c conda-forge fsspec>=2021.09 boto3 botocore=1.20.105 s3fs
    displayName: 'Setup s3_testing'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      mamba install -y -c conda-forge 'gcsfs>=2022.1'
    displayName: 'Setup gcs_testing'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      pip install deltalake
    displayName: 'Setup deltalake testing'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      mamba install -y -c conda-forge pymysql sqlalchemy snowflake-sqlalchemy
      mamba install -y -c conda-forge snowflake-connector-python --force --no-deps
    displayName: 'Setup MySQL testing'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      mamba install -y -c conda-forge scikit-learn='1.0.*'
    displayName: 'Setup scikit-learn testing'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      mamba install -y -c conda-forge xlrd xlsxwriter openpyxl
    displayName: 'Setup excel testing'

  - task: DownloadSecureFile@1
    name: testLicense
    displayName: 'Download test license'
    inputs:
      secureFile: 'bodo.lic'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      mamba install -y 'matplotlib<=3.5.1' -c conda-forge
    displayName: 'Matplotlib'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      mamba install -y pyspark=3.2 'openjdk=11' -c conda-forge
    displayName: 'PySpark'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      mamba install -y -c conda-forge 'openjdk=11' py4j maven pyspark=3.2
      cd iceberg
      python setup.py develop
    displayName: "Setup Iceberg Testing"

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      mamba install -y -c conda-forge sqlalchemy cx_oracle unzip
      if [[ "${{ parameters.name }}" == "Linux" || "${{ parameters.name }}" == "Linux_cache" ]]; then
        mamba install -y -c conda-forge  libaio
        wget https://download.oracle.com/otn_software/linux/instantclient/215000/instantclient-basic-linux.x64-21.5.0.0.0dbru.zip
        sudo unzip instantclient-basic-linux.x64-21.5.0.0.0dbru.zip -d /usr/local/lib
      else
        wget https://download.oracle.com/otn_software/mac/instantclient/198000/instantclient-basic-macos.x64-19.8.0.0.0dbru.zip
        sudo unzip instantclient-basic-macos.x64-19.8.0.0.0dbru.zip -d /usr/local/lib
      fi
    displayName: 'Setup Oracle Database testing'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate $CONDA_ENV
      mamba install -y -c conda-forge psycopg2
    displayName: 'Setup PostgreSQL testing'

  - script: |
      set -eo pipefail
      sudo chmod a+r $(testLicense.secureFilePath)
      sudo cp $(testLicense.secureFilePath) $HOME/bodo-inc
      export PATH=$HOME/miniconda3/bin:${PATH}
      source activate $CONDA_ENV
      pip install pytest pytest-azurepipelines
      if [[ "${{ parameters.name }}" == "Linux" || "${{ parameters.name }}" == "Linux_cache" ]]; then
        export LD_LIBRARY_PATH=/usr/local/lib/instantclient_21_5:$LD_LIBRARY_PATH
      else
        export LD_LIBRARY_PATH=/usr/local/lib/instantclient_19_8:$LD_LIBRARY_PATH
      fi
      cd $HOME/bodo-inc
      cp `python -c "import bodo; print(bodo.__file__[:-11])"`pytest.ini .
      if [[ "${{ parameters.caching_test }}" == "true" ]]; then
        python -m bodo.runtests_caching "$NP" bodo/tests/caching_tests
      else
        python -m bodo.runtests "$NP" --pyargs bodo -s -v -m "$(PYTEST_MARKER)"
      fi
    env:
      SF_USER: $(SNOWFLAKE_USER)
      SF_PASSWORD: $(SNOWFLAKE_PASSWORD)
      SF_USER2: $(SNOWFLAKE_USER2)
      SF_PASSWORD2: $(SNOWFLAKE_PASSWORD2)
    displayName: 'Test Bodo'

  - script: |
      set -eo pipefail
      export IS_RELEASE=`git tag --points-at HEAD`
      if [[ -n "$IS_RELEASE" ]]; then
        export IS_MAJOR_RELEASE=`python -c "import os; print(int(len(os.environ[\"IS_RELEASE\"].split(\".\")) < 3))"`
      fi
      if [[ "$IS_MAJOR_RELEASE" == 1 ]]; then
        export PATH=$HOME/miniconda3/bin:${PATH}
        source activate $CONDA_ENV
        git clone https://github.com/Bodo-inc/Bodo-examples.git
        cd Bodo-examples/examples/tpch/
        # Invalid env variables for AWS credentials in the pipeline, s3 access is denied unless we run it by resetting them
        AWS_ACCESS_KEY_ID="" AWS_SECRET_ACCESS_KEY="" mpiexec -n 4 python bodo_queries.py --folder s3://bodo-example-data/tpch/SF1
      fi
    displayName: 'Run Bodo Examples for major release'
