parameters:
  name: ''
  vmImage: ''

jobs:
- job: ${{ parameters.name }}
  timeoutInMinutes: 90
  pool:
    vmImage: ${{ parameters.vmImage }}

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.8'
    displayName: 'Use Python $(python.version)'

  - script: |
      set -eo pipefail

      export BODO_VERSION=`python -c "import versioneer; print(versioneer.get_version())"`
      echo "##vso[task.setvariable variable=BODO_VERSION]$BODO_VERSION"
      echo "BODO_VERSION: $BODO_VERSION"

      export IS_RELEASE=`git tag --points-at HEAD`
      echo "##vso[task.setvariable variable=IS_RELEASE]$IS_RELEASE"
      echo "IS_RELEASE: $IS_RELEASE"
    displayName: 'Get Bodo Version and Release Tag (if any)'

  - script: |
      set -eo pipefail
      pip install astunparse
    displayName: 'Prepare to build'

  - script: |
      set -eo pipefail
      if [[ "${{ parameters.name }}" = Linux* ]]; then
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
      else
        wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh
      fi
      chmod +x miniconda.sh
      ./miniconda.sh -b
      export PATH=$HOME/miniconda3/bin:${PATH}
    displayName: 'Setup Miniconda'

  - script: |
      set -eo pipefail
      if [[ "${{ parameters.name }}" == "macOS" ]]; then
        buildscripts/setup_osx_sdk.sh
      fi
    displayName: 'Setup OSX SDK'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:$PATH
      conda install -y flake8
      flake8 bodo
    displayName: 'Flake8'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      conda create -y -n bodo_build conda-build anaconda-client conda-verify
    displayName: 'Create Conda Env'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      source activate bodo_build
      if [[ $OBFUSCATE == 1 ]]; then
        conda install -y astor -c conda-forge
        cd obfuscation
        ./do_obfuscation.py
      else
        echo "Skipping Obfuscation"
      fi
    displayName: 'Obfuscation'

  - script: |
       set -eo pipefail
       export PATH=$HOME/miniconda3/bin:${PATH}
       source activate bodo_build
       python rename_to_pyx.py
    displayName: 'Rename py to pyx'

  - script: |
      set -eo pipefail
      if [[ ! -z $IS_RELEASE ]]; then
        ## Remove existing tag if it's a release
        git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' tag -d $IS_RELEASE
      fi

      ## Commit the changes after obfuscation
      git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' add .
      git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' commit -a --amend --no-edit

      if [[ ! -z $IS_RELEASE ]]; then
        ## Tag new commit with the old tag, if it's a release
        git -c user.name='Bot Herman' -c user.email='bot_herman@bodo.ai' tag -a $IS_RELEASE -m $IS_RELEASE
      fi
    displayName: 'Amend Commit to remove dirty from version'

  - script: |
      set -eo pipefail
      export PATH=$HOME/miniconda3/bin:${PATH}
      export MACOSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET:-10.15}
      export CONDA_BUILD_SYSROOT="/opt/MacOSX${MACOSX_DEPLOYMENT_TARGET}.sdk"
      source activate bodo_build
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        cd buildscripts/bodo-numba-dev-conda-recipe/
        echo "Using Numba-Dev Conda Recipe"
      else
        cd buildscripts/bodo-conda-recipe/
      fi
      if [[ "${{ parameters.platformBuild }}" == "true" ]]; then
        export CHECK_LICENSE_EXPIRED="0"
        export CHECK_LICENSE_CORE_COUNT="0"
        export CHECK_LICENSE_PLATFORM="1"
      else
        export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
        export CHECK_LICENSE_CORE_COUNT=$(CHECK_LICENSE_CORE_COUNT)
      fi
      if [[ "${{ parameters.useNumbaDev }}" == "true" ]]; then
        conda-build . -c numba/label/dev -c conda-forge --no-test
        echo "Using numba/label/dev channel"
      else
        conda-build . -c conda-forge --no-test
      fi
    displayName: 'Conda build Bodo'

  - task: DownloadSecureFile@1
    name: secret_file
    displayName: 'Download secrets file'
    inputs:
      secureFile: 'publish_binary_secrets'

  - script: |
      set -eo pipefail
      echo "BODO_VERSION: $BODO_VERSION"
      export NUMBA_DEV="${{ parameters.useNumbaDev }}"
      echo "NUMBA_DEV: $NUMBA_DEV"
      sudo chmod a+r $(secret_file.secureFilePath)
      sudo cp $(secret_file.secureFilePath) $HOME/secret_file
      cd $(System.DefaultWorkingDirectory)
      mkdir bodo-inc
      echo "IS_RELEASE: $IS_RELEASE"
      export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
      export OBFUSCATE=$(OBFUSCATE)
      if [[ "${{ parameters.platformBuild }}" == "true" ]]; then
        export CHECK_LICENSE_EXPIRED="0"
        export CHECK_LICENSE_CORE_COUNT="0"
        export CHECK_LICENSE_PLATFORM="1"
        export PLATFORM_DEV_RELEASE=$(PLATFORM_DEV_RELEASE)
      else
        export CHECK_LICENSE_EXPIRED=$(CHECK_LICENSE_EXPIRED)
        export CHECK_LICENSE_CORE_COUNT=$(CHECK_LICENSE_CORE_COUNT)
        export PLATFORM_DEV_RELEASE="false"
      fi
      artifactory_channel=`./buildscripts/azure/get_channel.sh $NUMBA_DEV $PLATFORM_DEV_RELEASE`
      echo "artifactory_channel: $artifactory_channel"
      if [[ "${{ parameters.name }}" = Linux* ]]; then
        artifactory_os_dir="linux-64"
      else
        artifactory_os_dir="osx-64"
      fi
      echo "artifactory_os_dir: $artifactory_os_dir"
      ./buildscripts/azure/publish_binary.sh $artifactory_channel $artifactory_os_dir $BODO_VERSION
      if [[ "${{ parameters.platformBuild }}" == "true" ]]; then
        ./buildscripts/azure/trigger_ami_build.sh $artifactory_channel $artifactory_os_dir $PLATFORM_DEV_RELEASE $BODO_VERSION
      fi

    displayName: 'publish bodo binary to Artifactory'
