# This file was autogenerated by the 'packer hcl2_upgrade' command. We
# recommend double checking that everything is correct before going forward. We
# also recommend treating this file as disposable. The HCL2 blocks in this
# file can be moved to other files. For example, the variable blocks could be
# moved to their own 'variables.pkr.hcl' file, etc. Those files need to be
# suffixed with '.pkr.hcl' to be visible to Packer. To use multiple files at
# once they also need to be in the same folder. 'packer inspect folder/'
# will describe to you what is in that folder.

# Avoid mixing go templating calls ( for example ```{{ upper(`string`) }}``` )
# and HCL2 calls (for example '${ var.string_value_example }' ). They won't be
# executed together and the outcome will be unknown.

# All generated input variables will be of 'string' type as this is how Packer JSON
# views them; you can change their type later on. Read the variables type
# constraints documentation
# https://www.packer.io/docs/templates/hcl_templates/variables#type-constraints for more info.

# AWS variable
variable "aws_region" {
  type    = string
  default = "us-east-2"
}

variable "ami_regions" {
  type    = list(string)
  default = ["us-east-1", "us-east-2", "us-west-1", "us-west-2"]
}

variable "aws_ssh_username" {
  type    = string
  default = "ec2-user"
}

variable "aws_access_key_id" {
  type    = string
  default = env("AWS_ACCESS_KEY_ID")
}

variable "aws_secret_access_key" {
  type    = string
  default = env("AWS_SECRET_ACCESS_KEY")
}

# Azure variable
variable "azure_location" {
  type    = string
  default = "westus"
}

variable "azure_replication_regions" {
  type    = list(string)
  default = [
    "eastus", "eastus2", "westus", "westus2", "westus3",
    "centralus", "northcentralus", "southcentralus", "westcentralus"
  ]
}

variable "azure_ssh_username" {
  type    = string
  default = "vm-user"
}

variable "azure_subscription_id" {
  type    = string
  default = env("AZURE_SUBSCRIPTION_ID")
}

variable "azure_client_id" {
  type    = string
  default = env("CLIENT_ID")
}

variable "azure_client_secret" {
  type    = string
  default = env("CLIENT_SECRET")
}

# Bodo variables
variable "bodo_version" {
  type = string
}

variable "bodo_version_short" {
  type = string
}

variable "bodosql_channel" {
  type    = string
  default = env("BODOSQL_CHANNEL")
}

variable "bodosql_version" {
  type    = string
  default = env("BODOSQL_VERSION")
}

# Github variables
variable "github_token" {
  type    = string
  default = env("BOT_GITHUB_TOKEN")
}

variable "github_username" {
  type    = string
  default = env("BOT_GITHUB_USERNAME")
}

# Conda variables
variable "conda_token" {
  type    = string
  default = env("CONDA_TOKEN")
}

variable "conda_username" {
  type    = string
  default = env("CONDA_USERNAME")
}

# Iceberg variables
variable "iceberg_connector_channel" {
  type    = string
  default = env("ICEBERG_CONNECTOR_CHANNEL")
}

variable "iceberg_connector_version" {
  type    = string
  default = env("ICEBERG_CONNECTOR_VERSION")
}

# Common variables
variable "image_sha" {
  type    = string
  default = "local"
}

variable "ind" {
  type    = number
  default = 0
}

variable "node_role" {
  type = string
}

variable "playbook_file" {
  type = string
}

variable "python_version" {
  type    = string
  default = env("PYTHON_VERSION")
}

variable "slurm_version" {
  type    = string
  default = "22.05.5"
}

variable "remote_dir" {
  type    = string
  default = "/var"
}

variable "scripts_dir" {
  type    = string
  default = "scripts"
}

variable "skip_create_image" {
  type    = bool
  default = true
}

variable "build_name" {
  type = string
}

locals {
  image_name = "bodo_${var.node_role}_${var.image_sha}_${var.bodo_version_short}"
}

# source blocks are generated from your builders; a source can be referenced in
# build blocks. A build block runs provisioner and post-processors on a
# source. Read the documentation for source blocks here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/source
source "amazon-ebs" "aws-ebs-build" {
  ami_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/xvda"
    volume_size           = "50"
    volume_type           = "gp3"
  }
  ami_description             = "bodo-${var.node_role}"
  ami_name                    = local.image_name
  ami_regions                 = var.ami_regions
  associate_public_ip_address = true
  communicator                = "ssh"
  encrypt_boot                = false
  instance_type               = "t3a.medium"
  launch_block_device_mappings {
    delete_on_termination = true
    device_name           = "/dev/xvda"
    volume_size           = 50
    volume_type           = "gp3"
  }
  region   = var.aws_region
  run_tags = {
    VantaContainsUserData = false
    VantaDescription      = "Resource provisioned for creating machine images."
    VantaNoAlert          = "This resource is used to generate a machine image, and is not a production resource."
    VantaNonProd          = true
    VantaOwner            = "ehsan@bodo.ai"
  }
  skip_create_ami = var.skip_create_image
  # This is a source image on top of that we are building our image
  # Amazon Linux 2 Kernel 5.10 AMI 2.0.20221004
  source_ami      = "ami-089a545a9ed9893b6"
  ssh_pty         = true
  ssh_username    = var.aws_ssh_username
  tags            = {
    AMISha      = var.image_sha
    BodoVersion = var.build_name
    Role        = var.node_role
  }
}

source "azure-arm" "azure-arm-build" {
  azure_tags = {
    BodoVersion           = var.build_name
    Role                  = var.node_role
    VMISha                = var.image_sha
    VantaContainsUserData = false
    VantaDescription      = "Resource provisioned for creating machine images."
    VantaNoAlert          = "This resource is used to generate a machine image, and is not a production resource."
    VantaNonProd          = true
    VantaOwner            = "ehsan@bodo.ai"
  }
  client_id                         = var.azure_client_id
  client_secret                     = var.azure_client_secret
  communicator                      = "ssh"
  image_offer                       = "CentOS"
  image_publisher                   = "OpenLogic"

  # This is a source image on top of that we are building our image
  # Linux (OpenLogic CentOS 7.9 Gen2)
  image_sku                         = "7_9-gen2"
  location                          = var.azure_location
  managed_image_name                = local.image_name
  # This is on the bodo.ai Azure account (not ehsanbodo account)
  managed_image_resource_group_name = "bodo-images-resource-grp"
  os_type                           = "Linux"

  skip_create_image = var.skip_create_image

  dynamic "shared_image_gallery_destination" {
    # Small trick to create block only if var.skip_create_image == false
    for_each = var.skip_create_image ? {} : { skip_create_image = false }
    content {
      gallery_name        = "BodoImages"
      image_name          = local.image_name
      image_version       = "1.0.0"
      replication_regions = var.azure_replication_regions
      resource_group      = "bodo-images-resource-grp"
      subscription        = var.azure_subscription_id
    }
  }

  ssh_pty         = "true"
  ssh_username    = var.azure_ssh_username
  subscription_id = var.azure_subscription_id
  vm_size         = "Standard_D2_v5"
}

# a build block invokes sources and runs provisioning steps on them. The
# documentation for build blocks can be found here:
# https://www.packer.io/docs/templates/hcl_templates/blocks/build
build {
  sources = ["source.amazon-ebs.aws-ebs-build", "source.azure-arm.azure-arm-build"]

  provisioner "shell" {
    execute_command = "{{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    only            = ["amazon-ebs.aws-ebs-build"]
    scripts         = ["${var.scripts_dir}/ami_precondition.sh"]
  }

  provisioner "shell" {
    execute_command = "{{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    only            = ["azure-arm.azure-arm-build"]
    scripts         = ["${var.scripts_dir}/vm_precondition.sh"]
  }

  provisioner "ansible-local" {
    clean_staging_directory = true
    extra_arguments         = [
      "--extra-vars \"github_username=${var.github_username} github_token=${var.github_token} conda_username=${var.conda_username} conda_token=${var.conda_token} bodo_version=${var.bodo_version} python_version=${var.python_version} bodosql_version=${var.bodosql_version} bodosql_channel=${var.bodosql_channel} iceberg_connector_version=${var.iceberg_connector_version} iceberg_connector_channel=${var.iceberg_connector_channel} aws_access_key_id=${var.aws_access_key_id} aws_secret_access_key=${var.aws_secret_access_key} slurm_version=${var.slurm_version}\""
    ]
    host_vars     = "../ansible/vars"
    playbook_dir  = "../ansible"
    playbook_file = "../ansible/${var.playbook_file}"
    role_paths    = ["../ansible/roles"]
  }

  provisioner "file" {
    destination = "/tmp"
    source      = "${var.scripts_dir}/tests"
  }

  provisioner "shell" {
    environment_vars = [
      "REMOTE_DIR=${var.remote_dir}", "NODE_ROLE=${var.node_role}", "BODO_VERSION=${var.bodo_version}",
      "ICEBERG_VERSION=${var.iceberg_connector_version}", "BODOSQL_VERSION=${var.bodosql_version}",
      "SLURM_VERSION=${var.slurm_version}"
    ]
    execute_command = "{{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    scripts         = ["${var.scripts_dir}/run_tests.sh"]
  }

  provisioner "shell" {
    execute_command = "{{ .Vars }} sudo -S -E bash '{{ .Path }}'"
    scripts         = ["${var.scripts_dir}/images_cleanup.sh"]
  }

  provisioner "shell" {
    execute_command = "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'"
    inline          = [
      "rpm --import https://packages.microsoft.com/keys/microsoft.asc",
      "sh -c 'echo -e \"[azure-cli]\nname=Azure CLI\nbaseurl=https://packages.microsoft.com/yumrepos/azure-cli\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc\" > /etc/yum.repos.d/azure-cli.repo'",
      "sudo yum update -y", "sudo yum install -y azure-cli"
    ]
    inline_shebang = "/bin/sh -xe"
    only           = ["azure-arm.azure-arm-build"]
  }

  provisioner "shell" {
    execute_command = "chmod +x {{ .Path }}; {{ .Vars }} sudo -E sh '{{ .Path }}'"
    inline          = ["/usr/sbin/waagent -force -deprovision+user && export HISTSIZE=0 && sync"]
    inline_shebang  = "/bin/sh -xe"
    only            = ["azure-arm.azure-arm-build"]
    skip_clean      = true
  }

  post-processor "manifest" {
    custom_data = {
      bodo_version = var.build_name
      img_prefix   = var.image_sha
    }

    output     = "${var.node_role}_manifest_${var.ind}.json"
    strip_path = true
  }
}
