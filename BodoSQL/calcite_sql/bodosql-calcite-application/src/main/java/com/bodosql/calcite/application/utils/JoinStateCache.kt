package com.bodosql.calcite.application.utils

import com.bodosql.calcite.ir.StateVariable

/**
 * Cache of state variables generated by streaming joins.
 */
class JoinStateCache {
    private val joinMap: MutableMap<Int, JoinCacheInfo> = HashMap()

    /**
     * Get the necessary code generation information for a given streaming join. This does not
     * work with non-streaming, so RuntimeJoinFilters are expected to be disabled.
     * @param joinFilterID The key mapping between join and its filter.
     * @return the state variable for the join or null if we are not streaming.
     */
    fun getStreamingJoinInfo(joinFilterID: Int): JoinCacheInfo {
        return joinMap[joinFilterID]
            ?: throw IllegalStateException("Join state variable not found for key $joinFilterID")
    }

    /**
     * Set the code generation information for a streaming join.
     * @param joinFilterID The key mapping between join and its filter.
     * @param stateVariable The state variable for the join.
     */
    fun setStreamingJoinStateInfo(
        joinFilterID: Int,
        stateVariable: StateVariable,
        keyMapping: List<Int>,
        nonEqualityMapping: Map<Int, Int>,
        numProbeCols: Int,
    ) {
        joinMap[joinFilterID] = JoinCacheInfo(stateVariable, keyMapping, nonEqualityMapping, numProbeCols)
    }
}

data class JoinCacheInfo(
    val stateVariable: StateVariable,
    val keyMapping: List<Int>,
    val nonEqualityMapping: Map<Int, Int>,
    val numProbeCols: Int,
)
