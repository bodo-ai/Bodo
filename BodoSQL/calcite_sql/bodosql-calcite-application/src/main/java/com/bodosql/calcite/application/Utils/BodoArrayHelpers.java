package com.bodosql.calcite.application.Utils;

import com.bodosql.calcite.application.BodoSQLCodegenException;
import org.apache.calcite.rel.type.*;
import org.apache.calcite.sql.type.*;

public class BodoArrayHelpers {

  /**
   * Takes a sql type, and a string length, and returns a string representing the appropriate
   * nullable array, allocated using bodo helper functions. Will upcast the type to the maximum bit
   * width.
   *
   * @param len String length expression
   * @param typ SqlType
   * @return A string representation of the allocated bodo array with the specified length
   */
  public static String sqlTypeToNullableBodoArray(String len, RelDataType typ) {
    // TODO: Use nullable information to optimize on if the output can contain NULLs.
    SqlTypeName typeName = typ.getSqlTypeName();
    switch (typeName) {
      case BOOLEAN:
        return String.format("bodo.libs.bool_arr_ext.alloc_bool_array(%s)", len);
      case TINYINT:
      case SMALLINT:
      case INTEGER:
      case BIGINT:
        return String.format("bodo.libs.int_arr_ext.alloc_int_array(%s, bodo.int64)", len);
      case FLOAT:
      case DOUBLE:
      case DECIMAL:
        return String.format("bodo.libs.float_arr_ext.alloc_float_array(%s, bodo.float64)", len);
      case DATE:
      case TIMESTAMP:
        return String.format("np.empty(%s, dtype=\"datetime64[ns]\")", len);
      case TIMESTAMP_WITH_LOCAL_TIME_ZONE:
        // TZ-Aware timestamps contain tz info in the type.
        String tzStr = ((TZAwareSqlType) typ).getTZInfo().getPyZone();
        return String.format(
            "bodo.libs.pd_datetime_arr_ext.alloc_pd_datetime_array(%s, %s)", len, tzStr);
      case INTERVAL_DAY_HOUR:
      case INTERVAL_DAY_MINUTE:
      case INTERVAL_DAY_SECOND:
      case INTERVAL_HOUR_MINUTE:
      case INTERVAL_HOUR_SECOND:
      case INTERVAL_MINUTE_SECOND:
      case INTERVAL_HOUR:
      case INTERVAL_MINUTE:
      case INTERVAL_SECOND:
      case INTERVAL_DAY:
        return String.format("np.empty(%s, dtype=\"timedelta64[ns]\")", len);
      case CHAR:
      case VARCHAR:
        return String.format("bodo.libs.str_arr_ext.pre_alloc_string_array(%s, -1)", len);
      case BINARY:
      case VARBINARY:
        return String.format("bodo.libs.str_arr_ext.pre_alloc_binary_array(%s, -1)", len);
      default:
        throw new BodoSQLCodegenException(
            "Error, type: " + typ.toString() + " not supported for Window Aggregation functions");
    }
  }

  /**
   * Generate a String that matches the Bodo array type generated by the given type. This produces a
   * different array type depending on if the input is nullable.
   *
   * @param type SQL type for which we are generating the array.
   * @param strAsDict Should string types output a dictionary encoded array as opposed to a regular
   *     string array.
   * @return A string that can be provided to generate code for the corresponding array type. This
   *     will be lowered as a global when we JIT compile the code.
   */
  public static String sqlTypeToBodoArrayType(RelDataType type, boolean strAsDict) {
    boolean nullable = type.isNullable();
    switch (type.getSqlTypeName()) {
      case BOOLEAN:
        if (nullable) {
          return "bodo.boolean_array";
        } else {
          return "numba.core.types.Array(bodo.bool_, 1, 'C')";
        }
      case TINYINT:
        // TODO: Add signed vs unsigned support
        if (nullable) {
          return "bodo.IntegerArrayType(bodo.int8)";
        } else {
          return "numba.core.types.Array(bodo.int8, 1, 'C')";
        }
      case SMALLINT:
        // TODO: Add signed vs unsigned support
        if (nullable) {
          return "bodo.IntegerArrayType(bodo.int16)";
        } else {
          return "numba.core.types.Array(bodo.int16, 1, 'C')";
        }
      case INTEGER:
        // TODO: Add signed vs unsigned support
        if (nullable) {
          return "bodo.IntegerArrayType(bodo.int32)";
        } else {
          return "numba.core.types.Array(bodo.int32, 1, 'C')";
        }
      case BIGINT:
        // TODO: Add signed vs unsigned support
        if (nullable) {
          return "bodo.IntegerArrayType(bodo.int64)";
        } else {
          return "numba.core.types.Array(bodo.int64, 1, 'C')";
        }
      case FLOAT:
        if (nullable) {
          return "bodo.FloatingArrayType(bodo.float32)";
        } else {
          return "numba.core.types.Array(bodo.float32, 1, 'C')";
        }
      case DOUBLE:
      case DECIMAL:
        if (nullable) {
          return "bodo.FloatingArrayType(bodo.float64)";
        } else {
          return "numba.core.types.Array(bodo.float64, 1, 'C')";
        }
      case DATE:
        // TODO: Add proper date support
      case TIMESTAMP:
        // TODO: Add nullable support
        return "numba.core.types.Array(bodo.datetime64ns, 1, 'C')";
      case TIMESTAMP_WITH_LOCAL_TIME_ZONE:
        // TODO: Add nullable support
        TZAwareSqlType tzAwareType = (TZAwareSqlType) type;
        return String.format("bodo.DatetimeArrayType(%s)", tzAwareType.getTZInfo().getPyZone());
      case TIME:
        // TODO: Add nullable support
        int precision = type.getPrecision();
        return String.format("bodo.TimeArrayType(%d)", precision);
      case VARCHAR:
      case CHAR:
        // TODO: Add nullable support
        if (strAsDict) {
          return "bodo.dict_str_arr_type";
        } else {
          return "bodo.string_array_type";
        }
      case VARBINARY:
      case BINARY:
        // TODO: Add nullable support
        return "bodo.binary_array_type";
      case INTERVAL_DAY_HOUR:
      case INTERVAL_DAY_MINUTE:
      case INTERVAL_DAY_SECOND:
      case INTERVAL_HOUR_MINUTE:
      case INTERVAL_HOUR_SECOND:
      case INTERVAL_MINUTE_SECOND:
      case INTERVAL_HOUR:
      case INTERVAL_MINUTE:
      case INTERVAL_SECOND:
      case INTERVAL_DAY:
        // TODO: Add nullable support
        return "numba.core.types.Array(bodo.timedelta64ns, 1, 'C')";
      case INTERVAL_YEAR:
      case INTERVAL_MONTH:
      case INTERVAL_YEAR_MONTH:
        // May later refactor this code to create DateOffsets, for now
        // causes an error
      default:
        throw new BodoSQLCodegenException(
            "Internal Error: Calcite Plan Produced an Unsupported Type: "
                + type.getSqlTypeName().getName());
    }
  }
}
