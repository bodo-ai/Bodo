[project]
name = "bodo"
channels = ["bodo.ai", "conda-forge"]
platforms = ["linux-64", "linux-aarch64", "osx-64", "osx-arm64"]
conda-pypi-map = { "bodo.ai" = "buildscripts/bodo_mapping.json" }

[environments]
# Development
default =      { features = ["rcpp", "dev", "local-mpi"],          solve-group = "312" }
azure =        { features = ["rcpp", "dev", "local-mpi", "azure"], solve-group = "312" }
# Platform
platform =     { features = ["rcpp", "platform", "platform-mpi"],  solve-group = "312-platform" }
platform-dev = { features = ["rcpp", "dev", "platform-mpi"],       solve-group = "312-platform" }
# Pip C++ Deps
pip-cpp-linux =      { features = ["local-mpi"], no-default-feature = true,   solve-group = "pip" }
pip-cpp-macos =      { features = ["rcpp", "local-mpi", "pip"], no-default-feature = true,   solve-group = "pip" }

# Build Commands
[tasks.build-bodo]
cmd = "pip install --no-deps --no-build-isolation -ve ."
inputs = ["bodo/**/*.cpp", "bodo/**/*.h", "bodo/**/*.pyx", "bodo/**/*.pxd"]
[tasks.build-bodo.env]  # SCcache Envs
SCCACHE_BUCKET = "engine-codebuild-cache"
SCCACHE_REGION = "us-east-2"
SCCACHE_S3_USE_SSL = "true"
SCCACHE_S3_SERVER_SIDE_ENCRYPTION = "true"

[tasks.build-bodo-debug]
cmd = "pip install --no-deps --no-build-isolation -Ccmake.build-type='Debug' -Cinstall.strip=false -ve ."
inputs = ["bodo/**/*.cpp", "bodo/**/*.h", "bodo/**/*.pyx", "bodo/**/*.pxd"]
[tasks.build-bodo-san]
cmd = "pip install --no-deps --no-build-isolation -Ccmake.build-type='DebugSanitize' -Cinstall.strip=false -ve ."
inputs = ["bodo/**/*.cpp", "bodo/**/*.h", "bodo/**/*.pyx", "bodo/**/*.pxd"]

[tasks.build-bodosql]
cmd = "pip install --no-deps --no-build-isolation -ve ."
cwd = "BodoSQL"
inputs = [
    "BodoSQL/calcite_sql/pom.xml",
    "BodoSQL/calcite_sql/bodosql-calcite-application/pom.xml",
    "BodoSQL/calcite_sql/bodosql-calcite-application/src/**/*.java",
    "BodoSQL/calcite_sql/bodosql-calcite-application/src/**/*.kt",
    "BodoSQL/calcite_sql/bodosql-calcite-application/src/**/*.sql",
]
outputs = ["BodoSQL/bodosql.egg-info/"]
[tasks.build-iceberg]
cmd = "pip install --no-deps --no-build-isolation -ve ."
cwd = "iceberg"
inputs = ["iceberg/bodo_iceberg_connector/iceberg-java/pom.xml", "iceberg/bodo_iceberg_connector/iceberg-java/src/"]
outputs = ["iceberg/bodo_iceberg_connector.egg-info/"]

[tasks]
# Building
bb = { depends-on = ["build-bodo"] }        # Alias for build-bodo
bbd = { depends-on = ["build-bodo-debug"] } # Alias for build-bodo-debug
bbs = { depends-on = ["build-bodo-san"] }   # Alias for build-bodo-san
bsql = { depends-on = ["build-bodosql"] }   # Alias for build-bodosql
bi = { depends-on = ["build-iceberg"] }     # Alias for build-iceberg
build = { depends-on = ["build-bodo", "build-bodosql", "build-iceberg"] }
b = { depends-on = ["build"] }              # Alias for build
# Additional
clean = { cmd = "pip uninstall -y bodo bodosql bodo-iceberg-connector && bash buildscripts/clean.sh" }


[system-requirements]
macos = "12.0"

[dependencies]
python = "3.12.*"
pip = "*"
# Core Python Deps
numba = "0.60.0"
numpy = ">=1.24,<1.27"
pandas = ">=2.2,<2.3"
pyarrow = { version = "18.1.0", channel = "conda-forge" }
fsspec = ">=2021.09"
requests = "*"
cloudpickle = ">=3.0,<4.0"
psutil = "*"
# Core Java Deps
openjdk = "=11"
py4j = "==0.10.9.7"

# HDFS
h5py = "*"
# Data Science
scipy = "*"
scikit-learn = "1.4.*"
matplotlib = "<=3.8.2"
# IO
boto3 = ">=1.35.74"
botocore = "*"
# Min bound is necessary. Otherwise s3fs will occasionally install v0.4.2
# Due to s3fs pinning aiobotocore and not regularly updating
s3fs = ">=2022.1"
adlfs = ">=2022.1"
gcsfs = ">=2022.1"
# Databases
pymysql = "*"
psycopg2 = "*"
sqlalchemy = "*"
# Snowflake
snowflake-connector-python = "*"
# Excel
xlrd = "*"
xlsxwriter = "*"
openpyxl = "*"
[target.linux-64.dependencies]
cx_oracle = "*"
pyarrow = { version = "18.1.0", channel = "bodo.ai" }
libarrow = { version = "18.1.0", channel = "bodo.ai" }
[target.osx-64.dependencies]
cx_oracle = "*"

# Runtime C++ Deps
[feature.rcpp.dependencies]
libcurl = "~=8.0"
zstd = "<=1.5.6"
hdf5 = { version = ">=1.14.3,<1.14.4.0a0", build = "*mpi_mpich_*" }
boost-cpp = "1.85"
aws-sdk-cpp = "1.11.*"

[feature.dev.dependencies]
# Build Python
setuptools = ">=64"
setuptools_scm = ">=8"
cython = ">=3.0,<3.1"
scikit-build-core = "*"
# Copied into bodo/mpi4py
mpi4py = "~=3.1"
# Build C++ Deps
cmake = "*"
ninja = "*"
make = "*"
ccache = "*"
sccache = "*"

# BodoSQL & Iceberg Testing
maven = "*"
sqlglot = "*"
duckdb = "*"
# Note: PySpark 3.5 is necessary for Python 3.12
pyspark = "3.5"
# Iceberg Testing
mmh3 = "*"
avro = "*"  # Reading avro

# Documentation Testing
beautifulsoup4 = "*"
# Snowflake Testing
snowflake-sqlalchemy = "*"
# S3 Testing
minio-server = "*"

# Testing and CI Tools
pytest = "*"
pytest-cov = "*"
pytest-mock = "*"
pytest-xdist = "*"
pytest-timeout = "*"
pytest-split = "*"
flaky = "*"

# Other Deps
pyyaml = "*"

# Developer Tools
ruff = "*"
pre-commit = "*"
ipython = "==8.16.1"

# For deltalake testing
# As of 2023-10-06, deltalake requires pyarrow <=12.0.0
# - pip:
#   - deltalake
# Future ML Libraries
# Used to be installed on AWS CIs
# - pytorch=1.9
# - bokeh=2.3
# - torchvision=0.10
# - tensorflow
# - pip:
#   - horovod

# Compilers and Related
[feature.dev.target.linux-64.dependencies]
gcc_linux-64 = ">=9"
gxx_linux-64 = ">=9"
[feature.dev.target.linux-aarch64.dependencies]
gcc_linux-aarch64 = ">=9"
gxx_linux-aarch64 = ">=9"
[feature.dev.target.osx-64.dependencies]
clang_osx-64 = "=19"
clangxx_osx-64 = "=19"
clang-tools = "=19"
[feature.dev.target.osx-arm64.dependencies]
clang_osx-arm64 = "=19"
clangxx_osx-arm64 = "=19"
clang-tools = "=19"

[feature.platform]
platforms = ["linux-64"]
[feature.platform.target.linux-64.dependencies]
ipython = "==8.16.1"
ipykernel = "==6.29.3"
ipywidgets = "==8.1.1"
nbconvert = "6.5.0"
bodo-azurefs-sas-token-provider = "1.0"
_openmp_mutex = { version = "*", build = "*gnu*" }
jupyter_client = "==8.6.1"
uvicorn = "*"
fastapi = "*"
httpie = "*"

# MPI Handling
# Restricted to match Intel MPI. Upgrade with IMPI.
[feature.local-mpi.dependencies]
# Using h* to avoid the "external_*" kind
mpich = { version = "4.1.*", build = "h*" }
[feature.platform-mpi]
channels = ["conda-forge", "conda-forge/label/broken"]
platforms = ["linux-64"]
# Want to use Intel MPI on platform, so use "external_*"
# https://conda-forge.org/docs/user/tipsandtricks/#using-external-message-passing-interface-mpi-libraries
dependencies = { mpich = { version = "4.1.2", build = "external_4", channel = "conda-forge/label/broken" } }

# Azure CI
[feature.azure.dependencies]
pytest-azurepipelines = "*"
pytest-nunit = "*"

[feature.pip.target.osx-64.dependencies]
clang_osx-64 = "=19"
clangxx_osx-64 = "=19"
[feature.pip.target.osx-arm64.dependencies]
clang_osx-arm64 = "=19"
clangxx_osx-arm64 = "=19"
