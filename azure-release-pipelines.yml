
# Azure Pipeline that is triggered weekdays at midnight or when a release is tagged.

trigger:
- refs/tags/*

pr: none

# Currently nightly can take up to ~12 hours to run. 1 AM is a good time to start.
# (Note that this is in UTC time, so 1AM UTC is 8PM EST)
schedules:
- cron: "0 1 * * MON-FRI"
  displayName: 'Weekdays Daily midnight build'
  branches:
    include:
    - develop

parameters:
  - name: BUILD_MAC_CONDA
    displayName: Build Conda Package for Mac x86 and ARM
    type: boolean
    default: false
  - name: BUILD_PIP
    displayName: Build Pip Package
    type: boolean
    default: false
  - name: UPLOAD_ARTIFACTORY
    displayName: 'Upload Builds to Artifactory (and Anaconda / PyPi for Releases)'
    type: boolean
    default: false
  - name: PYTEST_MARKER
    displayName: PyTest Marker
    type: string
    default: 'not weekly'

# NOTE: these variables determine artifactory channel to publish Bodo/BodoSQL/Iceberg packages.
# See get_channel.sh
# Originally added through Azure Pipeline UI.
# Azure pipeline UI includes AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
variables:
  CHECK_LICENSE_EXPIRED: 1
  CHECK_LICENSE_CORE_COUNT: 1
  OBFUSCATE: 1
  # Azure Pipelines currently doesn't have a "range" function to count from 1 to total
  # We have to manually add the element and split into an array
  # TODO: Replace with range when available
  bodo_1p_each: "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"
  bodo_1p_total: 22
  bodo_2p_each: "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30"
  bodo_2p_total: 30
  bodosql_1p_each: "1,2,3,4,5,6,7,8,9,10,11,12"
  bodosql_1p_total: 12
  bodosql_2p_each: "1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22"
  bodosql_2p_total: 22

stages:
- stage: Build_Bodo_Binary_Linux_Conda
  displayName: 'Build Bodo Binary for Linux Conda'
  jobs:
  - job: find_suffix
    pool: ScalingVMSet
    steps:
    - script: |
        set -exo pipefail
        export BUILD_DATE=`date  +"%Y-%m-%d"`
        export FILE_SUFFIX=built-${BUILD_DATE}
        echo "##vso[task.setvariable variable=fileSuffix;isOutput=true]$FILE_SUFFIX"
      displayName: 'write FILE_SUFFIX'
      name: suffix_step
  - template: buildscripts/bodo/azure/azure-build-conda-linux-macos.yml
    parameters:
      name: Linux
      vmImage: ubuntu-latest
      platformBuild: false
      weeklyTest: false
      uploadArtifactory: ${{ or(parameters.UPLOAD_ARTIFACTORY, ne(variables['Build.Reason'], 'Manual')) }}

# Additional Conda Packages. Usually disabled for Nightly Runs
# But useful to have when testing all Conda Builds
- stage: Build_Bodo_Binary_Other_Conda
  displayName: 'Build Bodo Binary for Other Conda'
  dependsOn: []
  condition: or(eq('${{ parameters.BUILD_MAC_CONDA }}', 'true'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
  jobs:
  - template: buildscripts/bodo/azure/azure-build-conda-linux-macos.yml
    parameters:
      name: macOS_311
      vmImage: macOS-latest
      platformBuild: false
      weeklyTest: false
      uploadArtifactory: ${{ or(parameters.UPLOAD_ARTIFACTORY, ne(variables['Build.Reason'], 'Manual')) }}
      pythonVersion: 3.11
  - template: buildscripts/bodo/azure/azure-build-conda-linux-macos.yml
    parameters:
      name: macOS_310
      vmImage: macOS-latest
      platformBuild: false
      weeklyTest: false
      uploadArtifactory: ${{ or(parameters.UPLOAD_ARTIFACTORY, ne(variables['Build.Reason'], 'Manual')) }}
      pythonVersion: 3.10
  - template: buildscripts/bodo/azure/azure-build-conda-linux-macos.yml
    parameters:
      name: macOS_39
      vmImage: macOS-latest
      platformBuild: false
      weeklyTest: false
      uploadArtifactory: ${{ or(parameters.UPLOAD_ARTIFACTORY, ne(variables['Build.Reason'], 'Manual')) }}
      pythonVersion: 3.9
#  - template: buildscripts/bodo/azure/azure-build-conda-windows.yml
#    parameters:
#      name: Windows
#      vmImage: windows-2019
  - template: buildscripts/bodo/azure/azure-build-conda-linux-macos.yml
    parameters:
      name: macOS_ARM_311
      vmImage: macOS-latest
      platformBuild: false
      weeklyTest: false
      buildARM: true
      uploadArtifactory: ${{ or(parameters.UPLOAD_ARTIFACTORY, ne(variables['Build.Reason'], 'Manual')) }}
      pythonVersion: 3.11
  - template: buildscripts/bodo/azure/azure-build-conda-linux-macos.yml
    parameters:
      name: macOS_ARM_310
      vmImage: macOS-latest
      platformBuild: false
      weeklyTest: false
      buildARM: true
      uploadArtifactory: ${{ or(parameters.UPLOAD_ARTIFACTORY, ne(variables['Build.Reason'], 'Manual')) }}
      pythonVersion: 3.10
  - template: buildscripts/bodo/azure/azure-build-conda-linux-macos.yml
    parameters:
      name: macOS_ARM_39
      vmImage: macOS-latest
      platformBuild: false
      weeklyTest: false
      buildARM: true
      uploadArtifactory: ${{ or(parameters.UPLOAD_ARTIFACTORY, ne(variables['Build.Reason'], 'Manual')) }}
      pythonVersion: 3.9

# Pip Packages. Usually disabled for Nightly Runs
# But useful to have when testing all Pip Builds
- stage: Build_Bodo_Binary_Pip
  displayName: 'Build Bodo Binary for Pip'
  dependsOn: []
  condition: or(eq('${{ parameters.BUILD_PIP }}', 'true'), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI'))
  jobs:
  - template: buildscripts/bodo/azure/azure-build-pip-linux.yml
    parameters:
      name: Linux_pip
      vmImage: ubuntu-latest
      platformBuild: false

#  - template: buildscripts/bodo/azure/azure-build-pip-windows.yml
#    parameters:
#      name: Windows_pip
#      vmImage: windows-2019
#      platformBuild: false
  # - template: buildscripts/bodo/azure/azure-build-pip-macos-x86.yml
  #   parameters:
  #     name: macOS_x86_pip
  #     vmImage: macOS-latest
  #     platformBuild: false

# Note: It is difficult to enforce the exact version of bodo to use for the build, outside of
# modifying the build recipe. Therefore, if we update BodoSQL's build process to require a specific version
# of Bodo, I'm requiring that we update the recipe in buildscripts/bodosql/conda-recipe/meta.yaml,
# and do a mini-release.

- stage: Build_BodoSQL_Binary
  displayName: 'Build BodoSQL Binary'
  dependsOn: Build_Bodo_Binary_Linux_Conda
  jobs:

  # BodoSQL build:
  - template: buildscripts/bodosql/azure/azure-build-conda.yml
    parameters:
      name: BodoSQL_Conda_Build
      CONDA_ENV: build_bodo_sql
      PYTHON_VERSION: 3.11
      uploadArtifactory: ${{ or(parameters.UPLOAD_ARTIFACTORY, in(variables['Build.Reason'], 'Schedule', 'ScheduleForced')) }}
  - template: buildscripts/bodosql/azure/azure-build-pip.yml
    parameters:
      name: BodoSQL_Pip_Build

  # Bodo tests
- stage: Test_Bodo_Binary
  displayName: 'Test Bodo Binary'
  dependsOn: Build_Bodo_Binary_Linux_Conda
  jobs:
  - template: buildscripts/bodo/azure/azure-test-conda-linux-macos.yml
    parameters:
      # Note: name is used later in the buildscripts to determine which version of conda to install
      name: Bodo_Tests
      useNumbaDev: false
      caching_test: false
      CONDA_ENV: 'bodo'
      matrix:
        ${{ each slice in split(variables.bodo_1p_each, ',') }}:
          ${{ format('BODO_1P_{0}_OF_{1}', slice, variables.bodo_1p_total) }}:
            NP: 1
            PYTEST_MARKER: ${{ format('bodo_{0}of{1} and ({2})', slice, variables.bodo_1p_total, parameters.PYTEST_MARKER) }}
            BODO_TESTING_PIPELINE_HAS_MULTI_RANK_TEST: true

        ${{ each slice in split(variables.bodo_2p_each, ',') }}:
          ${{ format('BODO_2P_{0}_OF_{1}', slice, variables.bodo_2p_total) }}:
            NP: 2
            PYTEST_MARKER: ${{ format('bodo_{0}of{1} and ({2})', slice, variables.bodo_2p_total, parameters.PYTEST_MARKER) }}
            BODO_TESTING_PIPELINE_HAS_MULTI_RANK_TEST: true

  - template: buildscripts/bodo/azure/azure-test-conda-linux-macos.yml
    parameters:
      name: Linux_cache
      useNumbaDev: false
      caching_test: true
      CONDA_ENV: 'bodo'
      matrix:
        TEST_2P:
          NP: 2
          PYTEST_MARKER: ""


  # BodoSQL tests
- stage: Test_BodoSQL_Binary_Streaming
  displayName: 'Test BodoSQL Binary Streaming'
  dependsOn: Build_BodoSQL_Binary
  jobs:

  - template: buildscripts/bodosql/azure/azure-test-conda-linux-macos.yml
    parameters:
      # Note: this name is not important, as we explicitly check uname to determine the os
      # for the bodoSQL tests
      name: BodoSQL_Streaming_Tests
      CONDA_ENV: run_bodo_sql
      BODO_STREAMING_ENABLED: 1
      matrix:
        ${{ each slice in split(variables.bodosql_1p_each, ',') }}:
          ${{ format('BODOSQL_1P_{0}_OF_{1}', slice, variables.bodosql_1p_total) }}:
            NP: 1
            PYTEST_MARKER: ${{ format('bodosql_{0}of{1} and ({2})', slice, variables.bodosql_1p_total, parameters.PYTEST_MARKER) }}
            BODO_TESTING_PIPELINE_HAS_MULTI_RANK_TEST: true
        ${{ each slice in split(variables.bodosql_2p_each, ',') }}:
          ${{ format('BODOSQL_2P_{0}_OF_{1}', slice, variables.bodosql_2p_total) }}:
            NP: 2
            PYTEST_MARKER: ${{ format('bodosql_{0}of{1} and ({2})', slice, variables.bodosql_2p_total, parameters.PYTEST_MARKER) }}
            BODO_TESTING_PIPELINE_HAS_MULTI_RANK_TEST: true

  - template: buildscripts/bodosql/azure/azure-test-conda-linux-macos.yml
    parameters:
      # Note: this name is not important, as we explicitly pass CACHE_TEST and
      # check uname to determine the os for the bodoSQL tests
      name: BodoSQL_Streaming_Caching_Tests
      CONDA_ENV: build_bodo_sql
      CACHE_TEST: true
      BODO_STREAMING_ENABLED: 1
      matrix:
        TEST_2P:
          NP: 2
          PYTEST_MARKER: ""

# Java Unit Tests
- stage: Test_BodoSQL_Maven
  displayName: 'Test BodoSQL Maven Unit Tests'
  dependsOn: []
  jobs:

  - template: buildscripts/bodosql/azure/azure-test-mvn-linux.yml
    parameters:
      name: BODOSQL_maven_unit_tests
